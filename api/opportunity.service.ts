/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAreasWebApiUpdateDocumentModel } from '../model/tsiWebAreasWebApiUpdateDocumentModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebDocumentResponse } from '../model/tsiWebDocumentResponse';
import { TsiWebDocumentSummary } from '../model/tsiWebDocumentSummary';
import { TsiWebDocumentsResponse } from '../model/tsiWebDocumentsResponse';
import { TsiWebOpportunity } from '../model/tsiWebOpportunity';
import { TsiWebOpportunityDetail } from '../model/tsiWebOpportunityDetail';
import { TsiWebOpportunityResponse } from '../model/tsiWebOpportunityResponse';
import { TsiWebOpportunitySummary } from '../model/tsiWebOpportunitySummary';
import { TsiWebResponse } from '../model/tsiWebResponse';
import { TsiWebSearchOpportunityResponse } from '../model/tsiWebSearchOpportunityResponse';
import { TsiWebTasksResponse } from '../model/tsiWebTasksResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class OpportunityService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for opportunities.
     * &lt;p&gt;Valid SearchType &#x3D; Name, Number, AccountName, ContactName, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunityAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunityAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunityAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling opportunityAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the opportunity.
     * 
     * @param opportunity The opportunity.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityCreateOpportunity(opportunity: TsiWebOpportunity, observe?: 'body', reportProgress?: boolean): Observable<TsiWebOpportunityResponse>;
    public opportunityCreateOpportunity(opportunity: TsiWebOpportunity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebOpportunityResponse>>;
    public opportunityCreateOpportunity(opportunity: TsiWebOpportunity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebOpportunityResponse>>;
    public opportunityCreateOpportunity(opportunity: TsiWebOpportunity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunity === null || opportunity === undefined) {
            throw new Error('Required parameter opportunity was null or undefined when calling opportunityCreateOpportunity.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebOpportunityResponse>(`${this.basePath}/api/opportunities`,
            opportunity,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the opportunity document.
     * 
     * @param opportunityNumber The opportunity number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityCreateOpportunityDocument(opportunityNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public opportunityCreateOpportunityDocument(opportunityNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public opportunityCreateOpportunityDocument(opportunityNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public opportunityCreateOpportunityDocument(opportunityNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityCreateOpportunityDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebDocumentResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of opportunities by account number.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetAccountOpportunities(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunityGetAccountOpportunities(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunityGetAccountOpportunities(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunityGetAccountOpportunities(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling opportunityGetAccountOpportunities.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/account/${encodeURIComponent(String(accountNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of opportunities by contact number.
     * 
     * @param contactNumber The contact number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetContactOpportunities(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunityGetContactOpportunities(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunityGetContactOpportunities(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunityGetContactOpportunities(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling opportunityGetContactOpportunities.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/contact/${encodeURIComponent(String(contactNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for the opportunity.
     * 
     * @param opportunityNumber The opportunity number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetCustomFields(opportunityNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public opportunityGetCustomFields(opportunityNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public opportunityGetCustomFields(opportunityNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public opportunityGetCustomFields(opportunityNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/customfields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity document file.
     * 
     * @param opportunityNumber The opportunity number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetFile(opportunityNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public opportunityGetFile(opportunityNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public opportunityGetFile(opportunityNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public opportunityGetFile(opportunityNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling opportunityGetFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents/${encodeURIComponent(String(documentID))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Opportunity completed tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param opportunityNumber The Opportunity number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityCompletedTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public opportunityGetOpportunityCompletedTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public opportunityGetOpportunityCompletedTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public opportunityGetOpportunityCompletedTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityCompletedTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/tasks/completed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity detail.
     * 
     * @param opportunityNumber The opportunity identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityDetail(opportunityNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebOpportunityDetail>;
    public opportunityGetOpportunityDetail(opportunityNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebOpportunityDetail>>;
    public opportunityGetOpportunityDetail(opportunityNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebOpportunityDetail>>;
    public opportunityGetOpportunityDetail(opportunityNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebOpportunityDetail>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account document with the file bytes.
     * 
     * @param opportunityNumber The opportunity number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityDocument(opportunityNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentSummary>;
    public opportunityGetOpportunityDocument(opportunityNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentSummary>>;
    public opportunityGetOpportunityDocument(opportunityNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentSummary>>;
    public opportunityGetOpportunityDocument(opportunityNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityDocument.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling opportunityGetOpportunityDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentSummary>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity documents.
     * 
     * @param opportunityNumber The opportunity number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityDocuments(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentsResponse>;
    public opportunityGetOpportunityDocuments(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentsResponse>>;
    public opportunityGetOpportunityDocuments(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentsResponse>>;
    public opportunityGetOpportunityDocuments(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityDocuments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentsResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Opportunity incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param opportunityNumber The Opportunity number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityIncompleteTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public opportunityGetOpportunityIncompleteTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public opportunityGetOpportunityIncompleteTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public opportunityGetOpportunityIncompleteTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityIncompleteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/tasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity summary.
     * 
     * @param opportunityNumber The opportunity identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunitySummary(opportunityNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebOpportunitySummary>;
    public opportunityGetOpportunitySummary(opportunityNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebOpportunitySummary>>;
    public opportunityGetOpportunitySummary(opportunityNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebOpportunitySummary>>;
    public opportunityGetOpportunitySummary(opportunityNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunitySummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebOpportunitySummary>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Opportunity tasks. Includes both completed and incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param opportunityNumber The Opportunity number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOpportunityTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public opportunityGetOpportunityTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public opportunityGetOpportunityTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public opportunityGetOpportunityTasks(opportunityNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityGetOpportunityTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/tasks/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of opportunities by owner (Rep).
     * 
     * @param repNumber The owner rep number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityGetOwnerOpportunities(repNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunityGetOwnerOpportunities(repNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunityGetOwnerOpportunities(repNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunityGetOwnerOpportunities(repNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (repNumber === null || repNumber === undefined) {
            throw new Error('Required parameter repNumber was null or undefined when calling opportunityGetOwnerOpportunities.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/owner/${encodeURIComponent(String(repNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches opportunities by account name.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySearchByAccountName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunitySearchByAccountName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByAccountName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByAccountName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling opportunitySearchByAccountName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search/account`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches opportunities by contact name.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySearchByContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunitySearchByContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling opportunitySearchByContactName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search/contact`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Opportunities using a custom category and field label.
     * 
     * @param searchModel A JSON or XML request containing the category, field and criteria to search for.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunitySearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (searchModel === null || searchModel === undefined) {
            throw new Error('Required parameter searchModel was null or undefined when calling opportunitySearchByCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search/customfield`,
            searchModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches opportunities by opportuniyt name.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunitySearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling opportunitySearchByName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search/name`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches opportunities by opportunity number.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySearchByNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchOpportunityResponse>;
    public opportunitySearchByNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchOpportunityResponse>>;
    public opportunitySearchByNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling opportunitySearchByNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchOpportunityResponse>(`${this.basePath}/api/opportunities/search/number`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Overwrites the opportuntiy document physical file, does not rename the file.
     * Requires a multipart/form request containing the physical file.
     * @param opportunityNumber The opportunity number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySetOpportunityDocumentFile(opportunityNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public opportunitySetOpportunityDocumentFile(opportunityNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public opportunitySetOpportunityDocumentFile(opportunityNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public opportunitySetOpportunityDocumentFile(opportunityNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunitySetOpportunityDocumentFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling opportunitySetOpportunityDocumentFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents/${encodeURIComponent(String(documentID))}/overwrite`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the documents file name and renames the associated file.
     * 
     * @param opportunityNumber The opportunity number.
     * @param documentID The document identifier.
     * @param fileName Name of the file.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunitySetOpportunityDocumentFileName(opportunityNumber: number, documentID: number, fileName: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public opportunitySetOpportunityDocumentFileName(opportunityNumber: number, documentID: number, fileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public opportunitySetOpportunityDocumentFileName(opportunityNumber: number, documentID: number, fileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public opportunitySetOpportunityDocumentFileName(opportunityNumber: number, documentID: number, fileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunitySetOpportunityDocumentFileName.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling opportunitySetOpportunityDocumentFileName.');
        }
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling opportunitySetOpportunityDocumentFileName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents/${encodeURIComponent(String(documentID))}/rename`,
            fileName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the opportunity custom fields.
     * 
     * @param opportunityNumber The opportunity number.
     * @param customFields The custom fields.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityUpdateCustomFields(opportunityNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public opportunityUpdateCustomFields(opportunityNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public opportunityUpdateCustomFields(opportunityNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public opportunityUpdateCustomFields(opportunityNumber: number, customFields: Array<TsiWebCustomField>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling opportunityUpdateCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/customfields`,
            customFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the opportunity.
     * 
     * @param opportunityNumber The opportunity number.
     * @param opportunity The opportunity.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityUpdateOpportunity(opportunityNumber: number, opportunity: TsiWebOpportunity, observe?: 'body', reportProgress?: boolean): Observable<TsiWebOpportunityResponse>;
    public opportunityUpdateOpportunity(opportunityNumber: number, opportunity: TsiWebOpportunity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebOpportunityResponse>>;
    public opportunityUpdateOpportunity(opportunityNumber: number, opportunity: TsiWebOpportunity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebOpportunityResponse>>;
    public opportunityUpdateOpportunity(opportunityNumber: number, opportunity: TsiWebOpportunity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityUpdateOpportunity.');
        }
        if (opportunity === null || opportunity === undefined) {
            throw new Error('Required parameter opportunity was null or undefined when calling opportunityUpdateOpportunity.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebOpportunityResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}`,
            opportunity,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the account document information. Does not allow the file name property to be changed.
     * 
     * @param opportunityNumber The opportunity number.
     * @param documentID The document identifier.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public opportunityUpdateOpportunityDocumentProperties(opportunityNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public opportunityUpdateOpportunityDocumentProperties(opportunityNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public opportunityUpdateOpportunityDocumentProperties(opportunityNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public opportunityUpdateOpportunityDocumentProperties(opportunityNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling opportunityUpdateOpportunityDocumentProperties.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling opportunityUpdateOpportunityDocumentProperties.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling opportunityUpdateOpportunityDocumentProperties.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/opportunities/${encodeURIComponent(String(opportunityNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
