/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAreasWebApiUpdateDocumentModel } from '../model/tsiWebAreasWebApiUpdateDocumentModel';
import { TsiWebContractAccount } from '../model/tsiWebContractAccount';
import { TsiWebContractDetail } from '../model/tsiWebContractDetail';
import { TsiWebContractDetailResponse } from '../model/tsiWebContractDetailResponse';
import { TsiWebContractMeter } from '../model/tsiWebContractMeter';
import { TsiWebContractMeterGroup } from '../model/tsiWebContractMeterGroup';
import { TsiWebContractResponse } from '../model/tsiWebContractResponse';
import { TsiWebContractServiceOrder } from '../model/tsiWebContractServiceOrder';
import { TsiWebContractSummary } from '../model/tsiWebContractSummary';
import { TsiWebCreateContractLineItemModel } from '../model/tsiWebCreateContractLineItemModel';
import { TsiWebCreateContractModel } from '../model/tsiWebCreateContractModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebDateTimeSearchModel } from '../model/tsiWebDateTimeSearchModel';
import { TsiWebDocumentResponse } from '../model/tsiWebDocumentResponse';
import { TsiWebDocumentSummary } from '../model/tsiWebDocumentSummary';
import { TsiWebItemCovered } from '../model/tsiWebItemCovered';
import { TsiWebMeterModel } from '../model/tsiWebMeterModel';
import { TsiWebPartAndLabor } from '../model/tsiWebPartAndLabor';
import { TsiWebResponse } from '../model/tsiWebResponse';
import { TsiWebSearchContractResponse } from '../model/tsiWebSearchContractResponse';
import { TsiWebServiceOrderSummary } from '../model/tsiWebServiceOrderSummary';
import { TsiWebTimeLog } from '../model/tsiWebTimeLog';
import { TsiWebUpdateContractLineItemModel } from '../model/tsiWebUpdateContractLineItemModel';
import { TsiWebUpdateContractModel } from '../model/tsiWebUpdateContractModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ContractsService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for Contract.
     * Valid SearchType &#x3D; ContractNumber, ContractType, Reference, StartDate, EndDate, AccountNumber, Status, Basis, AgreementNumber, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling contractsAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new contract.
     * BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The primary billing address for the account or the account address will be used instead.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;  AllowContractWithNoPrice : If true allows the contract to be created with a price of $0.00.  &lt;/p&gt;&lt;p&gt;  UseAsDefaultAccountContract : If true sets the new contract as the default for the bill to account and any accounts included in CustomersOnContract.  &lt;/p&gt;&lt;p&gt;  CustomersOnContract : An array of account numbers to include on the contract.  &lt;/p&gt;&lt;p&gt;  Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator  &lt;/p&gt;&lt;p&gt;  Valid properties for each basis type  &lt;/p&gt;&lt;p&gt;  Units and Incidents: MaxUnits, ChargePerUnit and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Prepaid: PrePaidAmount and WarningPercent.  &lt;/p&gt;&lt;p&gt;  Metered: MaxMeter, OverageChargePerClick, CurrentMeter, StartingMeter and WarningClicks.  &lt;/p&gt;&lt;p&gt;  Hourly usage: PeriodBaseHours, PeriodUsageCycle and RoundingFactor.  &lt;/p&gt;
     * @param model The model.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsCreateContract(model: TsiWebCreateContractModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractResponse>;
    public contractsCreateContract(model: TsiWebCreateContractModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractResponse>>;
    public contractsCreateContract(model: TsiWebCreateContractModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractResponse>>;
    public contractsCreateContract(model: TsiWebCreateContractModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsCreateContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebContractResponse>(`${this.basePath}/api/contracts`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a contract account
     * Metered, Metered Usage and Multiple Meter contracts are not currently supported.
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsCreateContractAccount(contractNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractResponse>;
    public contractsCreateContractAccount(contractNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractResponse>>;
    public contractsCreateContractAccount(contractNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractResponse>>;
    public contractsCreateContractAccount(contractNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsCreateContractAccount.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsCreateContractAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebContractResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the contract document.
     * Requires a multipart/form request containing the physical file and the xml / json Document
     * @param contractNumber The contract number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsCreateContractDocument(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public contractsCreateContractDocument(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public contractsCreateContractDocument(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public contractsCreateContractDocument(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsCreateContractDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebDocumentResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a contract line item detail
     * ContractItemType: Manual, CustomerAsset, PriceBookItem. Default value is Manual, if no values is passed in.  When adding a Price Book item to the contract you must specify either the PriceBookNumber or the ItemID. If you use the PriceBookNumber you may specify an override for the ItemID.
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param model CreateContractLineItemModel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsCreateContractLineItem(contractNumber: number, accountNumber: number, model: TsiWebCreateContractLineItemModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractDetailResponse>;
    public contractsCreateContractLineItem(contractNumber: number, accountNumber: number, model: TsiWebCreateContractLineItemModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractDetailResponse>>;
    public contractsCreateContractLineItem(contractNumber: number, accountNumber: number, model: TsiWebCreateContractLineItemModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractDetailResponse>>;
    public contractsCreateContractLineItem(contractNumber: number, accountNumber: number, model: TsiWebCreateContractLineItemModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsCreateContractLineItem.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsCreateContractLineItem.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsCreateContractLineItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebContractDetailResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/itemscovered`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a contract account
     * If allowDeleteIfInvoiced is set to true, the contract account(if it&#39;s not the &#39;bill-to&#39; account) will be deleted even if the contract is billed.          The default value is false, if no value is sent with the request.  Metered, Metered Usage and Multiple Meter contracts are not currently supported.
     * @param contractNumber 
     * @param accountNumber 
     * @param allowDeleteIfInvoiced 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsDeleteContractAccount(contractNumber: number, accountNumber: number, allowDeleteIfInvoiced?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contractsDeleteContractAccount(contractNumber: number, accountNumber: number, allowDeleteIfInvoiced?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contractsDeleteContractAccount(contractNumber: number, accountNumber: number, allowDeleteIfInvoiced?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contractsDeleteContractAccount(contractNumber: number, accountNumber: number, allowDeleteIfInvoiced?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsDeleteContractAccount.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsDeleteContractAccount.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (allowDeleteIfInvoiced !== undefined) {
            queryParameters = queryParameters.set('allowDeleteIfInvoiced', <any>allowDeleteIfInvoiced);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a contract line item
     * 
     * @param contractNumber 
     * @param contractDetailNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsDeleteContractLineItem(contractNumber: number, contractDetailNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractDetailResponse>;
    public contractsDeleteContractLineItem(contractNumber: number, contractDetailNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractDetailResponse>>;
    public contractsDeleteContractLineItem(contractNumber: number, contractDetailNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractDetailResponse>>;
    public contractsDeleteContractLineItem(contractNumber: number, contractDetailNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsDeleteContractLineItem.');
        }
        if (contractDetailNumber === null || contractDetailNumber === undefined) {
            throw new Error('Required parameter contractDetailNumber was null or undefined when calling contractsDeleteContractLineItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebContractDetailResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/itemscovered/${encodeURIComponent(String(contractDetailNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract accounts
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractAccounts(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebContractAccount>>;
    public contractsGetContractAccounts(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebContractAccount>>>;
    public contractsGetContractAccounts(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebContractAccount>>>;
    public contractsGetContractAccounts(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractAccounts.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebContractAccount>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract detail.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractDetails(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractDetail>;
    public contractsGetContractDetails(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractDetail>>;
    public contractsGetContractDetails(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractDetail>>;
    public contractsGetContractDetails(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebContractDetail>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract document with the file bytes.
     * 
     * @param contractNumber The contract number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractDocument(contractNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentSummary>;
    public contractsGetContractDocument(contractNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentSummary>>;
    public contractsGetContractDocument(contractNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentSummary>>;
    public contractsGetContractDocument(contractNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractDocument.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling contractsGetContractDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentSummary>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract documents
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractDocuments(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebDocumentSummary>>;
    public contractsGetContractDocuments(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebDocumentSummary>>>;
    public contractsGetContractDocuments(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebDocumentSummary>>>;
    public contractsGetContractDocuments(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractDocuments.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebDocumentSummary>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract items covered.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractItemsCovered(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebItemCovered>>;
    public contractsGetContractItemsCovered(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebItemCovered>>>;
    public contractsGetContractItemsCovered(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebItemCovered>>>;
    public contractsGetContractItemsCovered(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractItemsCovered.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebItemCovered>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/itemscovered`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract items covered by account number
     * 
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractItemsCoveredByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebItemCovered>>;
    public contractsGetContractItemsCoveredByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebItemCovered>>>;
    public contractsGetContractItemsCoveredByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebItemCovered>>>;
    public contractsGetContractItemsCoveredByAccountNumber(contractNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractItemsCoveredByAccountNumber.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsGetContractItemsCoveredByAccountNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebItemCovered>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/itemscovered`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract meters groups by meter group ID.
     * 
     * @param contractNumber The contract identifier number.
     * @param meterGroupId The contract meter group identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractMeterGroupById(contractNumber: number, meterGroupId: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractMeterGroup>;
    public contractsGetContractMeterGroupById(contractNumber: number, meterGroupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractMeterGroup>>;
    public contractsGetContractMeterGroupById(contractNumber: number, meterGroupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractMeterGroup>>;
    public contractsGetContractMeterGroupById(contractNumber: number, meterGroupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractMeterGroupById.');
        }
        if (meterGroupId === null || meterGroupId === undefined) {
            throw new Error('Required parameter meterGroupId was null or undefined when calling contractsGetContractMeterGroupById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebContractMeterGroup>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/metergroups/${encodeURIComponent(String(meterGroupId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract meters groups.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractMeterGroups(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebContractMeterGroup>>;
    public contractsGetContractMeterGroups(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebContractMeterGroup>>>;
    public contractsGetContractMeterGroups(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebContractMeterGroup>>>;
    public contractsGetContractMeterGroups(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractMeterGroups.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebContractMeterGroup>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/metergroups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract meters for the contract detail line item.
     * 
     * @param contractNumber The contract identifier number.
     * @param detailId The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractMeters(contractNumber: number, detailId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebContractMeter>>;
    public contractsGetContractMeters(contractNumber: number, detailId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebContractMeter>>>;
    public contractsGetContractMeters(contractNumber: number, detailId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebContractMeter>>>;
    public contractsGetContractMeters(contractNumber: number, detailId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractMeters.');
        }
        if (detailId === null || detailId === undefined) {
            throw new Error('Required parameter detailId was null or undefined when calling contractsGetContractMeters.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebContractMeter>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/itemscovered/${encodeURIComponent(String(detailId))}/meters`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract parts and labor.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractPartsAndLabor(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPartAndLabor>>;
    public contractsGetContractPartsAndLabor(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPartAndLabor>>>;
    public contractsGetContractPartsAndLabor(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPartAndLabor>>>;
    public contractsGetContractPartsAndLabor(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractPartsAndLabor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPartAndLabor>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/partsandlabor`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract parts and labor by account number
     * 
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractPartsAndLaborByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPartAndLabor>>;
    public contractsGetContractPartsAndLaborByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPartAndLabor>>>;
    public contractsGetContractPartsAndLaborByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPartAndLabor>>>;
    public contractsGetContractPartsAndLaborByAccountNumber(contractNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractPartsAndLaborByAccountNumber.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsGetContractPartsAndLaborByAccountNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPartAndLabor>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/partsandlabor`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract service order history
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractServiceOrderHistory(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebContractServiceOrder>>;
    public contractsGetContractServiceOrderHistory(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebContractServiceOrder>>>;
    public contractsGetContractServiceOrderHistory(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebContractServiceOrder>>>;
    public contractsGetContractServiceOrderHistory(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractServiceOrderHistory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebContractServiceOrder>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/serviceorders`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract service order history by account number
     * 
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractServiceOrderHistoryByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderSummary>>;
    public contractsGetContractServiceOrderHistoryByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderSummary>>>;
    public contractsGetContractServiceOrderHistoryByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderSummary>>>;
    public contractsGetContractServiceOrderHistoryByAccountNumber(contractNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractServiceOrderHistoryByAccountNumber.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsGetContractServiceOrderHistoryByAccountNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderSummary>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/serviceorders`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract summary.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractSummary(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractSummary>;
    public contractsGetContractSummary(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractSummary>>;
    public contractsGetContractSummary(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractSummary>>;
    public contractsGetContractSummary(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractSummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebContractSummary>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract time log.
     * 
     * @param contractNumber The contract identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractTimeLogs(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTimeLog>>;
    public contractsGetContractTimeLogs(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTimeLog>>>;
    public contractsGetContractTimeLogs(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTimeLog>>>;
    public contractsGetContractTimeLogs(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractTimeLogs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTimeLog>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/timelogs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract time log by account number
     * 
     * @param contractNumber The contract identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetContractTimeLogsByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTimeLog>>;
    public contractsGetContractTimeLogsByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTimeLog>>>;
    public contractsGetContractTimeLogsByAccountNumber(contractNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTimeLog>>>;
    public contractsGetContractTimeLogsByAccountNumber(contractNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetContractTimeLogsByAccountNumber.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contractsGetContractTimeLogsByAccountNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTimeLog>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/timelogs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for a contract.
     * 
     * @param contractNumber The contract number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetCustomFields(contractNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public contractsGetCustomFields(contractNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public contractsGetCustomFields(contractNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public contractsGetCustomFields(contractNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/customfields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contract document file.
     * 
     * @param contractNumber The contract number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsGetFile(contractNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public contractsGetFile(contractNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public contractsGetFile(contractNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public contractsGetFile(contractNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsGetFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling contractsGetFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents/${encodeURIComponent(String(documentID))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Account Number .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByAccountNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/accountnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Agreement Number .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByAgreementNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/agreementnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Basis .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByBasis(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByBasis(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByBasis(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByBasis(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByBasis.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/basis`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Contract number.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByContractNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/contractnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Contract type.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByContractType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByContractType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByContractType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByContractType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByContractType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/contracttype`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Custom field .
     * 
     * @param model A {Tsi.Web.CustomFieldSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsSearchByCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/customfield`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by End Date .
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsSearchByEndDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/enddate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Reference .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByReference(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByReference(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByReference(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByReference(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByReference.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/reference`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Start Date .
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsSearchByStartDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/startdate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Contract by Status .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSearchByStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContractResponse>;
    public contractsSearchByStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContractResponse>>;
    public contractsSearchByStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContractResponse>>;
    public contractsSearchByStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contractsSearchByStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContractResponse>(`${this.basePath}/api/contracts/search/status`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Overwrites the contract document physical file, does not rename the file.
     * Requires a multipart/form request containing the physical file.
     * @param contractNumber The contract number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSetContractDocumentFile(contractNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contractsSetContractDocumentFile(contractNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contractsSetContractDocumentFile(contractNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contractsSetContractDocumentFile(contractNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsSetContractDocumentFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling contractsSetContractDocumentFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents/${encodeURIComponent(String(documentID))}/overwrite`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the documents file name and renames the associated file.
     * 
     * @param contractNumber The contract number.
     * @param documentID The document identifier.
     * @param fileName Name of the file.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsSetContractDocumentFileName(contractNumber: number, documentID: number, fileName: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public contractsSetContractDocumentFileName(contractNumber: number, documentID: number, fileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public contractsSetContractDocumentFileName(contractNumber: number, documentID: number, fileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public contractsSetContractDocumentFileName(contractNumber: number, documentID: number, fileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsSetContractDocumentFileName.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling contractsSetContractDocumentFileName.');
        }
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling contractsSetContractDocumentFileName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents/${encodeURIComponent(String(documentID))}/rename`,
            fileName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a contract.
     * BillingCycle : \&quot;DoNotBill\&quot;, \&quot;Weekly\&quot;, \&quot;Monthly\&quot;,\&quot;Quarterly\&quot;, \&quot;SemiAnnually\&quot;, \&quot;Annually\&quot;, \&quot;InFull\&quot;.&lt;br /&gt;&lt;p&gt;If the billing cycle DoNotBill is specified any requested value for the BillTo address will be ignored. The existing values for the bill to address will be maintained.&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;  BillingStyle : \&quot;TotalOnly\&quot;, \&quot;ShowLineItems\&quot;.  &lt;/p&gt;&lt;p&gt;  PricingMethod : \&quot;Fixed\&quot;, \&quot;Calculated\&quot;.  &lt;/p&gt;&lt;p&gt;  BasisType : \&quot;Hourly\&quot;, \&quot;Incidents\&quot;, \&quot;Prepaid\&quot;, \&quot;HourlyUsage\&quot;, \&quot;TimePeriod\&quot;, \&quot;Units\&quot;.  &lt;/p&gt;&lt;p&gt;  LaborBillingType : \&quot;FixedHourlyRate\&quot;, \&quot;Discount\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingOption : \&quot;InvoiceCustomer\&quot;, \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;.  &lt;/p&gt;&lt;p&gt;  PeriodUsageCycle : \&quot;ContractTerm\&quot;, \&quot;Month\&quot;, \&quot;Quarter\&quot;, \&quot;SemiAnnual\&quot;, \&quot;Annual\&quot;.  &lt;/p&gt;&lt;p&gt;  RoundingFactor : \&quot;DoNotRound\&quot;, \&quot;FifteenMinutes\&quot;, \&quot;HalfHour\&quot;.  &lt;/p&gt;&lt;p&gt;  BillingAddress : \&quot;AccountDefaultAddress\&quot;, \&quot;PrimaryAddress\&quot;, \&quot;AlternateAddress\&quot;,\&quot;ManualEntry\&quot;.  &lt;/p&gt;&lt;p&gt;Basis - The following properties are read only HourrRemaining, MinutesRemaining, AmountRemaining, UnitsRemaining, UnitsUsed, PeriodClicksUsed, ToDateTotalHours, ToDateTotalDollars, CurrentDollars and OverUnderIndicator&lt;/p&gt;
     * @param contractNumber The account number.
     * @param model Update Contract Request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateContract(contractNumber: number, model: TsiWebUpdateContractModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractResponse>;
    public contractsUpdateContract(contractNumber: number, model: TsiWebUpdateContractModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractResponse>>;
    public contractsUpdateContract(contractNumber: number, model: TsiWebUpdateContractModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractResponse>>;
    public contractsUpdateContract(contractNumber: number, model: TsiWebUpdateContractModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsUpdateContract.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsUpdateContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebContractResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the contract document information. Does not allow the file name property to be changed.
     * 
     * @param contractNumber The contract number.
     * @param documentID The document identifier.
     * @param request The update document request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateContractDocumentProperties(contractNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public contractsUpdateContractDocumentProperties(contractNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public contractsUpdateContractDocumentProperties(contractNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public contractsUpdateContractDocumentProperties(contractNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsUpdateContractDocumentProperties.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling contractsUpdateContractDocumentProperties.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling contractsUpdateContractDocumentProperties.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a contract line item detail
     * 
     * @param contractNumber The contract identifier number.
     * @param contractDetailNumber The contract line item detail identifier.
     * @param model UpdateContractLineItemModel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateContractLineItem(contractNumber: number, contractDetailNumber: number, model: TsiWebUpdateContractLineItemModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContractDetailResponse>;
    public contractsUpdateContractLineItem(contractNumber: number, contractDetailNumber: number, model: TsiWebUpdateContractLineItemModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContractDetailResponse>>;
    public contractsUpdateContractLineItem(contractNumber: number, contractDetailNumber: number, model: TsiWebUpdateContractLineItemModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContractDetailResponse>>;
    public contractsUpdateContractLineItem(contractNumber: number, contractDetailNumber: number, model: TsiWebUpdateContractLineItemModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsUpdateContractLineItem.');
        }
        if (contractDetailNumber === null || contractDetailNumber === undefined) {
            throw new Error('Required parameter contractDetailNumber was null or undefined when calling contractsUpdateContractLineItem.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsUpdateContractLineItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebContractDetailResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/itemscovered/${encodeURIComponent(String(contractDetailNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the custom fields for a contract.
     * 
     * @param contractNumber The contract number.
     * @param customFields The custom fields.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateCustomFields(contractNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public contractsUpdateCustomFields(contractNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public contractsUpdateCustomFields(contractNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public contractsUpdateCustomFields(contractNumber: number, customFields: Array<TsiWebCustomField>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractNumber === null || contractNumber === undefined) {
            throw new Error('Required parameter contractNumber was null or undefined when calling contractsUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling contractsUpdateCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/contracts/${encodeURIComponent(String(contractNumber))}/customfields`,
            customFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a contract meter for a DeviceID
     * 
     * @param model ContractMeterModel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateMeterReadings(model: TsiWebMeterModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contractsUpdateMeterReadings(model: TsiWebMeterModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contractsUpdateMeterReadings(model: TsiWebMeterModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contractsUpdateMeterReadings(model: TsiWebMeterModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsUpdateMeterReadings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebResponse>(`${this.basePath}/api/contracts/meters/readings`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a contract meter for a DeviceID
     * 
     * @param model ContractMeterModel.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contractsUpdateMeterReadings_1(model: TsiWebMeterModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contractsUpdateMeterReadings_1(model: TsiWebMeterModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contractsUpdateMeterReadings_1(model: TsiWebMeterModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contractsUpdateMeterReadings_1(model: TsiWebMeterModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contractsUpdateMeterReadings_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebResponse>(`${this.basePath}/api/contracts/meters/readings`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
