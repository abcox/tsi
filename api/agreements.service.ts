/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAgreementAdditionalCharge } from '../model/tsiWebAgreementAdditionalCharge';
import { TsiWebAgreementBillTo } from '../model/tsiWebAgreementBillTo';
import { TsiWebAgreementCoveredAssetType } from '../model/tsiWebAgreementCoveredAssetType';
import { TsiWebAgreementCustomerAsset } from '../model/tsiWebAgreementCustomerAsset';
import { TsiWebAgreementDetail } from '../model/tsiWebAgreementDetail';
import { TsiWebAgreementSummary } from '../model/tsiWebAgreementSummary';
import { TsiWebDateTimeSearchModel } from '../model/tsiWebDateTimeSearchModel';
import { TsiWebSearchAgreementResponse } from '../model/tsiWebSearchAgreementResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AgreementsService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for Agreement.
     * 
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling agreementsAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement additional charges by id
     * 
     * @param agreementNumber The agreement identifier number
     * @param detailId The additional charge identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementAdditionalChargeByDetailId(agreementNumber: number, detailId: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementAdditionalCharge>;
    public agreementsGetAgreementAdditionalChargeByDetailId(agreementNumber: number, detailId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementAdditionalCharge>>;
    public agreementsGetAgreementAdditionalChargeByDetailId(agreementNumber: number, detailId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementAdditionalCharge>>;
    public agreementsGetAgreementAdditionalChargeByDetailId(agreementNumber: number, detailId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementAdditionalChargeByDetailId.');
        }
        if (detailId === null || detailId === undefined) {
            throw new Error('Required parameter detailId was null or undefined when calling agreementsGetAgreementAdditionalChargeByDetailId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementAdditionalCharge>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/additionalcharges/${encodeURIComponent(String(detailId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement additional charges.
     * 
     * @param agreementNumber The agreement identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementAdditionalCharges(agreementNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAgreementAdditionalCharge>>;
    public agreementsGetAgreementAdditionalCharges(agreementNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAgreementAdditionalCharge>>>;
    public agreementsGetAgreementAdditionalCharges(agreementNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAgreementAdditionalCharge>>>;
    public agreementsGetAgreementAdditionalCharges(agreementNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementAdditionalCharges.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAgreementAdditionalCharge>>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/additionalcharges`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement bill to information.
     * 
     * @param agreementNumber The agreement identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementBillToInformation(agreementNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementBillTo>;
    public agreementsGetAgreementBillToInformation(agreementNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementBillTo>>;
    public agreementsGetAgreementBillToInformation(agreementNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementBillTo>>;
    public agreementsGetAgreementBillToInformation(agreementNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementBillToInformation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementBillTo>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/billto`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account customer assets.
     * 
     * @param agreementNumber The agreement identifier number
     * @param accountNumber The agreement identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementCustomerAssets(agreementNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAgreementCustomerAsset>>;
    public agreementsGetAgreementCustomerAssets(agreementNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAgreementCustomerAsset>>>;
    public agreementsGetAgreementCustomerAssets(agreementNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAgreementCustomerAsset>>>;
    public agreementsGetAgreementCustomerAssets(agreementNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementCustomerAssets.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling agreementsGetAgreementCustomerAssets.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAgreementCustomerAsset>>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/account/${encodeURIComponent(String(accountNumber))}/customerassets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement customer assets by customer asset number.
     * 
     * @param agreementNumber The agreement identifier number
     * @param accountNumber The agreement identifier number
     * @param customerassetNumber The customer asset identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementCustomerAssetsByAssetID(agreementNumber: number, accountNumber: number, customerassetNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementCustomerAsset>;
    public agreementsGetAgreementCustomerAssetsByAssetID(agreementNumber: number, accountNumber: number, customerassetNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementCustomerAsset>>;
    public agreementsGetAgreementCustomerAssetsByAssetID(agreementNumber: number, accountNumber: number, customerassetNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementCustomerAsset>>;
    public agreementsGetAgreementCustomerAssetsByAssetID(agreementNumber: number, accountNumber: number, customerassetNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByAssetID.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByAssetID.');
        }
        if (customerassetNumber === null || customerassetNumber === undefined) {
            throw new Error('Required parameter customerassetNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByAssetID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementCustomerAsset>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/account/${encodeURIComponent(String(accountNumber))}/customerassets/${encodeURIComponent(String(customerassetNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement customer assets by provider asset number.
     * 
     * @param agreementNumber The agreement identifier number
     * @param accountNumber The agreement identifier number
     * @param providerAssetNumber The customer provider asset identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementCustomerAssetsByProviderAssetID(agreementNumber: number, accountNumber: number, providerAssetNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementCustomerAsset>;
    public agreementsGetAgreementCustomerAssetsByProviderAssetID(agreementNumber: number, accountNumber: number, providerAssetNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementCustomerAsset>>;
    public agreementsGetAgreementCustomerAssetsByProviderAssetID(agreementNumber: number, accountNumber: number, providerAssetNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementCustomerAsset>>;
    public agreementsGetAgreementCustomerAssetsByProviderAssetID(agreementNumber: number, accountNumber: number, providerAssetNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByProviderAssetID.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByProviderAssetID.');
        }
        if (providerAssetNumber === null || providerAssetNumber === undefined) {
            throw new Error('Required parameter providerAssetNumber was null or undefined when calling agreementsGetAgreementCustomerAssetsByProviderAssetID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementCustomerAsset>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/account/${encodeURIComponent(String(accountNumber))}/customerassets/provider/${encodeURIComponent(String(providerAssetNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement detail.
     * 
     * @param agreementNumber The agreement identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementDetails(agreementNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementDetail>;
    public agreementsGetAgreementDetails(agreementNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementDetail>>;
    public agreementsGetAgreementDetails(agreementNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementDetail>>;
    public agreementsGetAgreementDetails(agreementNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementDetail>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement summary.
     * 
     * @param agreementNumber The agreement identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementSummary(agreementNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementSummary>;
    public agreementsGetAgreementSummary(agreementNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementSummary>>;
    public agreementsGetAgreementSummary(agreementNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementSummary>>;
    public agreementsGetAgreementSummary(agreementNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetAgreementSummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementSummary>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account agreements.
     * 
     * @param accountNumber The account identifier number
     * @param activeOnly if set to true returns only the active agreements.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementsForAccounts(accountNumber: number, activeOnly?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsGetAgreementsForAccounts(accountNumber: number, activeOnly?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsGetAgreementsForAccounts(accountNumber: number, activeOnly?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsGetAgreementsForAccounts(accountNumber: number, activeOnly?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling agreementsGetAgreementsForAccounts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeOnly !== undefined) {
            queryParameters = queryParameters.set('activeOnly', <any>activeOnly);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/account/${encodeURIComponent(String(accountNumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account agreements.
     * 
     * @param accountNumber The account identifier number
     * @param activeOnly if set to true returns only the active agreements.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetAgreementsForAccounts_1(accountNumber: number, activeOnly: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsGetAgreementsForAccounts_1(accountNumber: number, activeOnly: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsGetAgreementsForAccounts_1(accountNumber: number, activeOnly: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsGetAgreementsForAccounts_1(accountNumber: number, activeOnly: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling agreementsGetAgreementsForAccounts_1.');
        }
        if (activeOnly === null || activeOnly === undefined) {
            throw new Error('Required parameter activeOnly was null or undefined when calling agreementsGetAgreementsForAccounts_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/account/${encodeURIComponent(String(accountNumber))}/${encodeURIComponent(String(activeOnly))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement covered asset type by asset type id.
     * 
     * @param agreementNumber The agreement identifier number
     * @param coveredAssetNumber The covered asset type identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetCoveredAssetTypeByAssetTypeId(agreementNumber: number, coveredAssetNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAgreementCoveredAssetType>;
    public agreementsGetCoveredAssetTypeByAssetTypeId(agreementNumber: number, coveredAssetNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAgreementCoveredAssetType>>;
    public agreementsGetCoveredAssetTypeByAssetTypeId(agreementNumber: number, coveredAssetNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAgreementCoveredAssetType>>;
    public agreementsGetCoveredAssetTypeByAssetTypeId(agreementNumber: number, coveredAssetNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetCoveredAssetTypeByAssetTypeId.');
        }
        if (coveredAssetNumber === null || coveredAssetNumber === undefined) {
            throw new Error('Required parameter coveredAssetNumber was null or undefined when calling agreementsGetCoveredAssetTypeByAssetTypeId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAgreementCoveredAssetType>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/coveredassets/${encodeURIComponent(String(coveredAssetNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the agreement covered asset types.
     * 
     * @param agreementNumber The agreement identifier number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsGetCoveredAssetTypes(agreementNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAgreementCoveredAssetType>>;
    public agreementsGetCoveredAssetTypes(agreementNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAgreementCoveredAssetType>>>;
    public agreementsGetCoveredAssetTypes(agreementNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAgreementCoveredAssetType>>>;
    public agreementsGetCoveredAssetTypes(agreementNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (agreementNumber === null || agreementNumber === undefined) {
            throw new Error('Required parameter agreementNumber was null or undefined when calling agreementsGetCoveredAssetTypes.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAgreementCoveredAssetType>>(`${this.basePath}/api/agreements/${encodeURIComponent(String(agreementNumber))}/coveredassets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by agreement number.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByAgreementNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling agreementsSearchByAgreementNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/agreementnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by AgreementType.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByAgreementType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByAgreementType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByAgreementType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByAgreementType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling agreementsSearchByAgreementType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/agreementtype`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by ContractNumber.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByContractNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling agreementsSearchByContractNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/contractnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by Agreement End Date.
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling agreementsSearchByEndDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/enddate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by ExternalProduct.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByExternalProduct(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByExternalProduct(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByExternalProduct(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByExternalProduct(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling agreementsSearchByExternalProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/externalproduct`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search agreement by Agreement Start Date.
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public agreementsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAgreementResponse>;
    public agreementsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAgreementResponse>>;
    public agreementsSearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling agreementsSearchByStartDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAgreementResponse>(`${this.basePath}/api/agreements/search/startdate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
