/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAccountProfile } from '../model/tsiWebAccountProfile';
import { TsiWebAccountSource } from '../model/tsiWebAccountSource';
import { TsiWebAccountStatus } from '../model/tsiWebAccountStatus';
import { TsiWebAccountType } from '../model/tsiWebAccountType';
import { TsiWebAssetType } from '../model/tsiWebAssetType';
import { TsiWebBOTaxCode } from '../model/tsiWebBOTaxCode';
import { TsiWebBOTaxType } from '../model/tsiWebBOTaxType';
import { TsiWebCloseReason } from '../model/tsiWebCloseReason';
import { TsiWebContactProfile } from '../model/tsiWebContactProfile';
import { TsiWebCountry } from '../model/tsiWebCountry';
import { TsiWebCreateTimeEntryReasonRequest } from '../model/tsiWebCreateTimeEntryReasonRequest';
import { TsiWebCustomFieldCategory } from '../model/tsiWebCustomFieldCategory';
import { TsiWebCustomFieldCategoryRequest } from '../model/tsiWebCustomFieldCategoryRequest';
import { TsiWebCustomFieldCategoryResponse } from '../model/tsiWebCustomFieldCategoryResponse';
import { TsiWebCustomFieldDefinitionModel } from '../model/tsiWebCustomFieldDefinitionModel';
import { TsiWebCustomFieldDefinitionResponse } from '../model/tsiWebCustomFieldDefinitionResponse';
import { TsiWebDepartment } from '../model/tsiWebDepartment';
import { TsiWebDispatchBoard } from '../model/tsiWebDispatchBoard';
import { TsiWebDocumentTopic } from '../model/tsiWebDocumentTopic';
import { TsiWebExpensePaymentType } from '../model/tsiWebExpensePaymentType';
import { TsiWebExpensePaymentTypeModel } from '../model/tsiWebExpensePaymentTypeModel';
import { TsiWebExpensePaymentTypesResponse } from '../model/tsiWebExpensePaymentTypesResponse';
import { TsiWebExpenseType } from '../model/tsiWebExpenseType';
import { TsiWebExpenseTypeModel } from '../model/tsiWebExpenseTypeModel';
import { TsiWebExpenseTypesResponse } from '../model/tsiWebExpenseTypesResponse';
import { TsiWebExternalProduct } from '../model/tsiWebExternalProduct';
import { TsiWebFreightTerm } from '../model/tsiWebFreightTerm';
import { TsiWebHowDidYouHearAboutUs } from '../model/tsiWebHowDidYouHearAboutUs';
import { TsiWebInventoryLocation } from '../model/tsiWebInventoryLocation';
import { TsiWebInvoiceTerm } from '../model/tsiWebInvoiceTerm';
import { TsiWebJournalAction } from '../model/tsiWebJournalAction';
import { TsiWebJournalActionsResponse } from '../model/tsiWebJournalActionsResponse';
import { TsiWebJournalTopic } from '../model/tsiWebJournalTopic';
import { TsiWebMarketingGroup } from '../model/tsiWebMarketingGroup';
import { TsiWebMasterTableResponse } from '../model/tsiWebMasterTableResponse';
import { TsiWebMeter } from '../model/tsiWebMeter';
import { TsiWebMeterGroup } from '../model/tsiWebMeterGroup';
import { TsiWebNextActionType } from '../model/tsiWebNextActionType';
import { TsiWebOpportunityName } from '../model/tsiWebOpportunityName';
import { TsiWebOpportunityStage } from '../model/tsiWebOpportunityStage';
import { TsiWebOpportunityStatus } from '../model/tsiWebOpportunityStatus';
import { TsiWebOpportunityType } from '../model/tsiWebOpportunityType';
import { TsiWebPasswordCategory } from '../model/tsiWebPasswordCategory';
import { TsiWebPaymentMethod } from '../model/tsiWebPaymentMethod';
import { TsiWebPhoneLocation } from '../model/tsiWebPhoneLocation';
import { TsiWebPrefix } from '../model/tsiWebPrefix';
import { TsiWebPriceLevel } from '../model/tsiWebPriceLevel';
import { TsiWebPurchaseOrderDescription } from '../model/tsiWebPurchaseOrderDescription';
import { TsiWebRepSummary } from '../model/tsiWebRepSummary';
import { TsiWebResolution } from '../model/tsiWebResolution';
import { TsiWebSICCode } from '../model/tsiWebSICCode';
import { TsiWebSalesTaxCode } from '../model/tsiWebSalesTaxCode';
import { TsiWebServiceOrderBriefDescription } from '../model/tsiWebServiceOrderBriefDescription';
import { TsiWebServiceOrderComment } from '../model/tsiWebServiceOrderComment';
import { TsiWebServiceOrderDetailComment } from '../model/tsiWebServiceOrderDetailComment';
import { TsiWebServiceOrderNoteTopic } from '../model/tsiWebServiceOrderNoteTopic';
import { TsiWebServiceOrderPriority } from '../model/tsiWebServiceOrderPriority';
import { TsiWebServiceOrderProfile } from '../model/tsiWebServiceOrderProfile';
import { TsiWebServiceOrderSeverity } from '../model/tsiWebServiceOrderSeverity';
import { TsiWebServiceOrderStatus } from '../model/tsiWebServiceOrderStatus';
import { TsiWebServiceOrderTemplate } from '../model/tsiWebServiceOrderTemplate';
import { TsiWebServiceOrderType } from '../model/tsiWebServiceOrderType';
import { TsiWebServiceZone } from '../model/tsiWebServiceZone';
import { TsiWebShipper } from '../model/tsiWebShipper';
import { TsiWebShippingMethod } from '../model/tsiWebShippingMethod';
import { TsiWebState } from '../model/tsiWebState';
import { TsiWebSubContractor } from '../model/tsiWebSubContractor';
import { TsiWebSupportedSystem } from '../model/tsiWebSupportedSystem';
import { TsiWebSymptom } from '../model/tsiWebSymptom';
import { TsiWebSystemType } from '../model/tsiWebSystemType';
import { TsiWebTaskAction } from '../model/tsiWebTaskAction';
import { TsiWebTaskActionPlan } from '../model/tsiWebTaskActionPlan';
import { TsiWebTaskCheckListTemplate } from '../model/tsiWebTaskCheckListTemplate';
import { TsiWebTaskLibrary } from '../model/tsiWebTaskLibrary';
import { TsiWebTaskResource } from '../model/tsiWebTaskResource';
import { TsiWebTimeEntryReason } from '../model/tsiWebTimeEntryReason';
import { TsiWebTimeEntryReasonResponse } from '../model/tsiWebTimeEntryReasonResponse';
import { TsiWebTitle } from '../model/tsiWebTitle';
import { TsiWebUpdateEntryModel } from '../model/tsiWebUpdateEntryModel';
import { TsiWebUpdateExpensePaymentTypeRequest } from '../model/tsiWebUpdateExpensePaymentTypeRequest';
import { TsiWebUpdateExpenseTypeRequest } from '../model/tsiWebUpdateExpenseTypeRequest';
import { TsiWebUpdateJournalActionRequest } from '../model/tsiWebUpdateJournalActionRequest';
import { TsiWebUpdateTimeEntryReasonRequest } from '../model/tsiWebUpdateTimeEntryReasonRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MasterTablesService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates the account custom field category.
     * 
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesCreateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesCreateAccountCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/accounts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the true / false custom field definition.
     * 
     * @param model The model.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateBooleanCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateBooleanCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateBooleanCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateBooleanCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateBooleanCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/truefalse`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the contact custom field category.
     * 
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesCreateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesCreateContactCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/contacts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the ContractMeter.
     * 
     * @param meter The contract meter.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateContractMeter(meter: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateContractMeter(meter: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateContractMeter(meter: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateContractMeter(meter: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (meter === null || meter === undefined) {
            throw new Error('Required parameter meter was null or undefined when calling masterTablesCreateContractMeter.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/contracts/meters`,
            meter,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the Contract Meter group.
     * 
     * @param meterGroup The contract meter group.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateContractMeterGroup(meterGroup: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateContractMeterGroup(meterGroup: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateContractMeterGroup(meterGroup: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateContractMeterGroup(meterGroup: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (meterGroup === null || meterGroup === undefined) {
            throw new Error('Required parameter meterGroup was null or undefined when calling masterTablesCreateContractMeterGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/contracts/metergroups`,
            meterGroup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the currency custom field definition.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateCurrencyCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateCurrencyCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateCurrencyCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateCurrencyCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateCurrencyCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/currency`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the date custom field definition.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateDateCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateDateCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateDateCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateDateCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateDateCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/date`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the drop down custom field definition.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateDropDownCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateDropDownCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateDropDownCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateDropDownCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateDropDownCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/dropdown`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an expense payment type.
     * 
     * @param expensePaymentType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateExpensePaymentType(expensePaymentType: TsiWebExpensePaymentTypeModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebExpensePaymentTypesResponse>;
    public masterTablesCreateExpensePaymentType(expensePaymentType: TsiWebExpensePaymentTypeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebExpensePaymentTypesResponse>>;
    public masterTablesCreateExpensePaymentType(expensePaymentType: TsiWebExpensePaymentTypeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebExpensePaymentTypesResponse>>;
    public masterTablesCreateExpensePaymentType(expensePaymentType: TsiWebExpensePaymentTypeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (expensePaymentType === null || expensePaymentType === undefined) {
            throw new Error('Required parameter expensePaymentType was null or undefined when calling masterTablesCreateExpensePaymentType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebExpensePaymentTypesResponse>(`${this.basePath}/api/mastertables/expensepaymenttypes`,
            expensePaymentType,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an expense type.
     * 
     * @param expenseType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateExpenseType(expenseType: TsiWebExpenseTypeModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebExpenseTypesResponse>;
    public masterTablesCreateExpenseType(expenseType: TsiWebExpenseTypeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebExpenseTypesResponse>>;
    public masterTablesCreateExpenseType(expenseType: TsiWebExpenseTypeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebExpenseTypesResponse>>;
    public masterTablesCreateExpenseType(expenseType: TsiWebExpenseTypeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (expenseType === null || expenseType === undefined) {
            throw new Error('Required parameter expenseType was null or undefined when calling masterTablesCreateExpenseType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebExpenseTypesResponse>(`${this.basePath}/api/mastertables/expensetypes`,
            expenseType,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the journal action.
     * If Weight is excluded from the POST values it will be defaulted to 0.
     * @param action The journal action to create.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateJournalAction(action: TsiWebJournalAction, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalActionsResponse>;
    public masterTablesCreateJournalAction(action: TsiWebJournalAction, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalActionsResponse>>;
    public masterTablesCreateJournalAction(action: TsiWebJournalAction, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalActionsResponse>>;
    public masterTablesCreateJournalAction(action: TsiWebJournalAction, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling masterTablesCreateJournalAction.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebJournalActionsResponse>(`${this.basePath}/api/mastertables/journal/actions`,
            action,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the journal topic.
     * 
     * @param journalTopic The journal topic.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateJournalTopic(journalTopic: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateJournalTopic(journalTopic: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateJournalTopic(journalTopic: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateJournalTopic(journalTopic: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (journalTopic === null || journalTopic === undefined) {
            throw new Error('Required parameter journalTopic was null or undefined when calling masterTablesCreateJournalTopic.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/journal/topics`,
            journalTopic,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the number custom field definition.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateNumberCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateNumberCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateNumberCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateNumberCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateNumberCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/number`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the opportunity custom field category.
     * 
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesCreateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesCreateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesCreateOpportunityCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/opportunities`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the Resolution.
     * 
     * @param resolution The contract resolution.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateResolution(resolution: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateResolution(resolution: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateResolution(resolution: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateResolution(resolution: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (resolution === null || resolution === undefined) {
            throw new Error('Required parameter resolution was null or undefined when calling masterTablesCreateResolution.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/resolutions`,
            resolution,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the Service Order Profile.
     * 
     * @param profile The contract meter.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateServiceOrderProfile(profile: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateServiceOrderProfile(profile: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateServiceOrderProfile(profile: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateServiceOrderProfile(profile: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (profile === null || profile === undefined) {
            throw new Error('Required parameter profile was null or undefined when calling masterTablesCreateServiceOrderProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/serviceOrderProfiles`,
            profile,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the Symptom.
     * 
     * @param symptom The Symptom.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateSymptom(symptom: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesCreateSymptom(symptom: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesCreateSymptom(symptom: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesCreateSymptom(symptom: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (symptom === null || symptom === undefined) {
            throw new Error('Required parameter symptom was null or undefined when calling masterTablesCreateSymptom.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/symptoms`,
            symptom,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the custom field.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateTextCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateTextCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateTextCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateTextCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateTextCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/text`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the time custom field definition.
     * 
     * @param model The custom field definition.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateTimeCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesCreateTimeCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateTimeCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesCreateTimeCustomFieldDefinition(model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesCreateTimeCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/time`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
     * 
     * @param reason 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesCreateTimeEntryReason(reason: TsiWebCreateTimeEntryReasonRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTimeEntryReasonResponse>;
    public masterTablesCreateTimeEntryReason(reason: TsiWebCreateTimeEntryReasonRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTimeEntryReasonResponse>>;
    public masterTablesCreateTimeEntryReason(reason: TsiWebCreateTimeEntryReasonRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTimeEntryReasonResponse>>;
    public masterTablesCreateTimeEntryReason(reason: TsiWebCreateTimeEntryReasonRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reason === null || reason === undefined) {
            throw new Error('Required parameter reason was null or undefined when calling masterTablesCreateTimeEntryReason.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebTimeEntryReasonResponse>(`${this.basePath}/api/mastertables/timeentryreasons`,
            reason,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountCustomFields(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetAccountCustomFields(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetAccountCustomFields(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetAccountCustomFields(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/accounts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountCustomFields_1(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetAccountCustomFields_1(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetAccountCustomFields_1(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetAccountCustomFields_1(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetAccountCustomFields_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/accounts/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account groups.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMarketingGroup>>;
    public masterTablesGetAccountGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMarketingGroup>>>;
    public masterTablesGetAccountGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMarketingGroup>>>;
    public masterTablesGetAccountGroups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMarketingGroup>>(`${this.basePath}/api/mastertables/accounts/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account profiles.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountProfiles(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountProfile>>;
    public masterTablesGetAccountProfiles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountProfile>>>;
    public masterTablesGetAccountProfiles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountProfile>>>;
    public masterTablesGetAccountProfiles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountProfile>>(`${this.basePath}/api/mastertables/accounts/profiles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account sources.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountSources(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountSource>>;
    public masterTablesGetAccountSources(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountSource>>>;
    public masterTablesGetAccountSources(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountSource>>>;
    public masterTablesGetAccountSources(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountSource>>(`${this.basePath}/api/mastertables/accounts/sources`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account sources.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountSources_2(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountSource>>;
    public masterTablesGetAccountSources_2(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountSource>>>;
    public masterTablesGetAccountSources_2(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountSource>>>;
    public masterTablesGetAccountSources_2(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetAccountSources_2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountSource>>(`${this.basePath}/api/mastertables/accounts/sources/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined account statuses.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountStatuses(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountStatus>>;
    public masterTablesGetAccountStatuses(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountStatus>>>;
    public masterTablesGetAccountStatuses(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountStatus>>>;
    public masterTablesGetAccountStatuses(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountStatus>>(`${this.basePath}/api/mastertables/accounts/statuses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined account statuses.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountStatuses_3(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountStatus>>;
    public masterTablesGetAccountStatuses_3(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountStatus>>>;
    public masterTablesGetAccountStatuses_3(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountStatus>>>;
    public masterTablesGetAccountStatuses_3(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetAccountStatuses_3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountStatus>>(`${this.basePath}/api/mastertables/account/statuses/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined account types.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountTypes(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountType>>;
    public masterTablesGetAccountTypes(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountType>>>;
    public masterTablesGetAccountTypes(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountType>>>;
    public masterTablesGetAccountTypes(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountType>>(`${this.basePath}/api/mastertables/accounts/types`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined account types.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAccountTypes_4(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountType>>;
    public masterTablesGetAccountTypes_4(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountType>>>;
    public masterTablesGetAccountTypes_4(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountType>>>;
    public masterTablesGetAccountTypes_4(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetAccountTypes_4.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountType>>(`${this.basePath}/api/mastertables/accounts/types/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the asset types.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetAssetTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssetType>>;
    public masterTablesGetAssetTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssetType>>>;
    public masterTablesGetAssetTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssetType>>>;
    public masterTablesGetAssetTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssetType>>(`${this.basePath}/api/mastertables/assettypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the bo tax codes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetBOTaxCodes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebBOTaxCode>>;
    public masterTablesGetBOTaxCodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebBOTaxCode>>>;
    public masterTablesGetBOTaxCodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebBOTaxCode>>>;
    public masterTablesGetBOTaxCodes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebBOTaxCode>>(`${this.basePath}/api/mastertables/botaxcodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the bo tax types.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetBOTaxTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebBOTaxType>>;
    public masterTablesGetBOTaxTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebBOTaxType>>>;
    public masterTablesGetBOTaxTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebBOTaxType>>>;
    public masterTablesGetBOTaxTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebBOTaxType>>(`${this.basePath}/api/mastertables/botaxtypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContactCustomFields(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetContactCustomFields(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetContactCustomFields(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetContactCustomFields(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/contacts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContactCustomFields_5(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetContactCustomFields_5(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetContactCustomFields_5(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetContactCustomFields_5(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetContactCustomFields_5.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/contacts/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account groups.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContactGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMarketingGroup>>;
    public masterTablesGetContactGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMarketingGroup>>>;
    public masterTablesGetContactGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMarketingGroup>>>;
    public masterTablesGetContactGroups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMarketingGroup>>(`${this.basePath}/api/mastertables/contact/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact profiles.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContactProfiles(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebContactProfile>>;
    public masterTablesGetContactProfiles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebContactProfile>>>;
    public masterTablesGetContactProfiles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebContactProfile>>>;
    public masterTablesGetContactProfiles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebContactProfile>>(`${this.basePath}/api/mastertables/contact/profiles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined contract meter groups.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContractMeterGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMeterGroup>>;
    public masterTablesGetContractMeterGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMeterGroup>>>;
    public masterTablesGetContractMeterGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMeterGroup>>>;
    public masterTablesGetContractMeterGroups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMeterGroup>>(`${this.basePath}/api/mastertables/contracts/metergroups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined contract meters.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetContractMeters(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMeter>>;
    public masterTablesGetContractMeters(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMeter>>>;
    public masterTablesGetContractMeters(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMeter>>>;
    public masterTablesGetContractMeters(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMeter>>(`${this.basePath}/api/mastertables/contracts/meters`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined countries.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetCountries(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCountry>>;
    public masterTablesGetCountries(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCountry>>>;
    public masterTablesGetCountries(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCountry>>>;
    public masterTablesGetCountries(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCountry>>(`${this.basePath}/api/mastertables/countries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined countries.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetCountries_6(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCountry>>;
    public masterTablesGetCountries_6(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCountry>>>;
    public masterTablesGetCountries_6(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCountry>>>;
    public masterTablesGetCountries_6(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetCountries_6.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCountry>>(`${this.basePath}/api/mastertables/countries/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the departments.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetDepartments(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebDepartment>>;
    public masterTablesGetDepartments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebDepartment>>>;
    public masterTablesGetDepartments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebDepartment>>>;
    public masterTablesGetDepartments(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebDepartment>>(`${this.basePath}/api/mastertables/departments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the dispatch boards.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetDispatchBoards(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebDispatchBoard>>;
    public masterTablesGetDispatchBoards(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebDispatchBoard>>>;
    public masterTablesGetDispatchBoards(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebDispatchBoard>>>;
    public masterTablesGetDispatchBoards(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebDispatchBoard>>(`${this.basePath}/api/mastertables/dispatchboards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the document topics.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetDocumentTopics(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebDocumentTopic>>;
    public masterTablesGetDocumentTopics(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebDocumentTopic>>>;
    public masterTablesGetDocumentTopics(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebDocumentTopic>>>;
    public masterTablesGetDocumentTopics(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebDocumentTopic>>(`${this.basePath}/api/mastertables/documenttopics`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the expense payment types.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetExpensePaymentTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebExpensePaymentType>>;
    public masterTablesGetExpensePaymentTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebExpensePaymentType>>>;
    public masterTablesGetExpensePaymentTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebExpensePaymentType>>>;
    public masterTablesGetExpensePaymentTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebExpensePaymentType>>(`${this.basePath}/api/mastertables/expensepaymenttypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the expense types.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetExpenseTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebExpenseType>>;
    public masterTablesGetExpenseTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebExpenseType>>>;
    public masterTablesGetExpenseTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebExpenseType>>>;
    public masterTablesGetExpenseTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebExpenseType>>(`${this.basePath}/api/mastertables/expensetypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the external products.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetExternalProducts(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebExternalProduct>>;
    public masterTablesGetExternalProducts(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebExternalProduct>>>;
    public masterTablesGetExternalProducts(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebExternalProduct>>>;
    public masterTablesGetExternalProducts(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebExternalProduct>>(`${this.basePath}/api/mastertables/externalproducts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the external products.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetExternalProducts_7(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebExternalProduct>>;
    public masterTablesGetExternalProducts_7(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebExternalProduct>>>;
    public masterTablesGetExternalProducts_7(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebExternalProduct>>>;
    public masterTablesGetExternalProducts_7(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetExternalProducts_7.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebExternalProduct>>(`${this.basePath}/api/mastertables/externalproducts/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the freight terms from the master tables.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetFreightTerms(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebFreightTerm>>;
    public masterTablesGetFreightTerms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebFreightTerm>>>;
    public masterTablesGetFreightTerms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebFreightTerm>>>;
    public masterTablesGetFreightTerms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebFreightTerm>>(`${this.basePath}/api/mastertables/freightterms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the inventory locations.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetInventoryLocations(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebInventoryLocation>>;
    public masterTablesGetInventoryLocations(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebInventoryLocation>>>;
    public masterTablesGetInventoryLocations(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebInventoryLocation>>>;
    public masterTablesGetInventoryLocations(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebInventoryLocation>>(`${this.basePath}/api/mastertables/inventorylocations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the inventory locations.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetInventoryLocations_8(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebInventoryLocation>>;
    public masterTablesGetInventoryLocations_8(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebInventoryLocation>>>;
    public masterTablesGetInventoryLocations_8(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebInventoryLocation>>>;
    public masterTablesGetInventoryLocations_8(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetInventoryLocations_8.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebInventoryLocation>>(`${this.basePath}/api/mastertables/inventorylocations/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the invoice terms.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetInvoiceTerms(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebInvoiceTerm>>;
    public masterTablesGetInvoiceTerms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebInvoiceTerm>>>;
    public masterTablesGetInvoiceTerms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebInvoiceTerm>>>;
    public masterTablesGetInvoiceTerms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebInvoiceTerm>>(`${this.basePath}/api/mastertables/invoiceterms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the journal actions.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetJournalActions(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebJournalAction>>;
    public masterTablesGetJournalActions(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebJournalAction>>>;
    public masterTablesGetJournalActions(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebJournalAction>>>;
    public masterTablesGetJournalActions(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebJournalAction>>(`${this.basePath}/api/mastertables/journal/actions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the journal actions.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetJournalActions_9(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebJournalAction>>;
    public masterTablesGetJournalActions_9(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebJournalAction>>>;
    public masterTablesGetJournalActions_9(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebJournalAction>>>;
    public masterTablesGetJournalActions_9(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetJournalActions_9.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebJournalAction>>(`${this.basePath}/api/mastertables/journal/actions/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the journal topics.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetJournalTopics(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebJournalTopic>>;
    public masterTablesGetJournalTopics(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebJournalTopic>>>;
    public masterTablesGetJournalTopics(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebJournalTopic>>>;
    public masterTablesGetJournalTopics(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebJournalTopic>>(`${this.basePath}/api/mastertables/journal/topics`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the journal topics.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetJournalTopics_10(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebJournalTopic>>;
    public masterTablesGetJournalTopics_10(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebJournalTopic>>>;
    public masterTablesGetJournalTopics_10(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebJournalTopic>>>;
    public masterTablesGetJournalTopics_10(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetJournalTopics_10.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebJournalTopic>>(`${this.basePath}/api/mastertables/journal/topics/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the name prefixes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetNamePrefixes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPrefix>>;
    public masterTablesGetNamePrefixes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPrefix>>>;
    public masterTablesGetNamePrefixes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPrefix>>>;
    public masterTablesGetNamePrefixes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPrefix>>(`${this.basePath}/api/mastertables/nameprefixes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the defined Asset Next Action Tupes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetNextActionTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebNextActionType>>;
    public masterTablesGetNextActionTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebNextActionType>>>;
    public masterTablesGetNextActionTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebNextActionType>>>;
    public masterTablesGetNextActionTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebNextActionType>>(`${this.basePath}/api/mastertables/nextActionTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity close reasons.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityCloseReasons(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCloseReason>>;
    public masterTablesGetOpportunityCloseReasons(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCloseReason>>>;
    public masterTablesGetOpportunityCloseReasons(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCloseReason>>>;
    public masterTablesGetOpportunityCloseReasons(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCloseReason>>(`${this.basePath}/api/mastertables/opportunities/closereasons`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityCustomFields(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetOpportunityCustomFields(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetOpportunityCustomFields(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetOpportunityCustomFields(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/opportunities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity custom fields.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityCustomFields_11(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomFieldCategory>>;
    public masterTablesGetOpportunityCustomFields_11(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetOpportunityCustomFields_11(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomFieldCategory>>>;
    public masterTablesGetOpportunityCustomFields_11(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetOpportunityCustomFields_11.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomFieldCategory>>(`${this.basePath}/api/mastertables/customfields/opportunities/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity how did you hear about us entries.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityHowDidYouHearAboutUs(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebHowDidYouHearAboutUs>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebHowDidYouHearAboutUs>>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebHowDidYouHearAboutUs>>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebHowDidYouHearAboutUs>>(`${this.basePath}/api/mastertables/opportunities/howdidyouhearaboutus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity how did you hear about us entries.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityHowDidYouHearAboutUs_12(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebHowDidYouHearAboutUs>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs_12(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebHowDidYouHearAboutUs>>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs_12(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebHowDidYouHearAboutUs>>>;
    public masterTablesGetOpportunityHowDidYouHearAboutUs_12(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetOpportunityHowDidYouHearAboutUs_12.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebHowDidYouHearAboutUs>>(`${this.basePath}/api/mastertables/opportunities/howdidyouhearaboutus/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity names.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityNames(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityName>>;
    public masterTablesGetOpportunityNames(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityName>>>;
    public masterTablesGetOpportunityNames(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityName>>>;
    public masterTablesGetOpportunityNames(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityName>>(`${this.basePath}/api/mastertables/opportunities/names`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity stages.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityStages(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityStage>>;
    public masterTablesGetOpportunityStages(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityStage>>>;
    public masterTablesGetOpportunityStages(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityStage>>>;
    public masterTablesGetOpportunityStages(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityStage>>(`${this.basePath}/api/mastertables/opportunities/stages`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity statuses.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityStatuses(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityStatus>>;
    public masterTablesGetOpportunityStatuses(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityStatus>>>;
    public masterTablesGetOpportunityStatuses(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityStatus>>>;
    public masterTablesGetOpportunityStatuses(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityStatus>>(`${this.basePath}/api/mastertables/opportunities/statuses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity statuses.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityStatuses_13(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityStatus>>;
    public masterTablesGetOpportunityStatuses_13(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityStatus>>>;
    public masterTablesGetOpportunityStatuses_13(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityStatus>>>;
    public masterTablesGetOpportunityStatuses_13(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetOpportunityStatuses_13.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityStatus>>(`${this.basePath}/api/mastertables/opportunities/statuses/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity types.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityTypes(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityType>>;
    public masterTablesGetOpportunityTypes(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityType>>>;
    public masterTablesGetOpportunityTypes(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityType>>>;
    public masterTablesGetOpportunityTypes(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityType>>(`${this.basePath}/api/mastertables/opportunities/types`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the opportunity types.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetOpportunityTypes_14(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebOpportunityType>>;
    public masterTablesGetOpportunityTypes_14(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebOpportunityType>>>;
    public masterTablesGetOpportunityTypes_14(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebOpportunityType>>>;
    public masterTablesGetOpportunityTypes_14(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetOpportunityTypes_14.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebOpportunityType>>(`${this.basePath}/api/mastertables/opportunities/types/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the password categories.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPasswordCategories(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPasswordCategory>>;
    public masterTablesGetPasswordCategories(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPasswordCategory>>>;
    public masterTablesGetPasswordCategories(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPasswordCategory>>>;
    public masterTablesGetPasswordCategories(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPasswordCategory>>(`${this.basePath}/api/mastertables/accounts/passwordcategories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the password categories.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPasswordCategories_15(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPasswordCategory>>;
    public masterTablesGetPasswordCategories_15(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPasswordCategory>>>;
    public masterTablesGetPasswordCategories_15(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPasswordCategory>>>;
    public masterTablesGetPasswordCategories_15(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetPasswordCategories_15.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPasswordCategory>>(`${this.basePath}/api/mastertables/accounts/passwordcategories/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the payment methods.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPaymentMethods(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPaymentMethod>>;
    public masterTablesGetPaymentMethods(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPaymentMethod>>>;
    public masterTablesGetPaymentMethods(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPaymentMethod>>>;
    public masterTablesGetPaymentMethods(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPaymentMethod>>(`${this.basePath}/api/mastertables/paymentmethods`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the phone locations.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPhoneLocations(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPhoneLocation>>;
    public masterTablesGetPhoneLocations(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPhoneLocation>>>;
    public masterTablesGetPhoneLocations(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPhoneLocation>>>;
    public masterTablesGetPhoneLocations(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPhoneLocation>>(`${this.basePath}/api/mastertables/phonelocations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the phone locations.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPhoneLocations_16(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPhoneLocation>>;
    public masterTablesGetPhoneLocations_16(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPhoneLocation>>>;
    public masterTablesGetPhoneLocations_16(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPhoneLocation>>>;
    public masterTablesGetPhoneLocations_16(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetPhoneLocations_16.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPhoneLocation>>(`${this.basePath}/api/mastertables/phonelocations/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the price levels.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPriceLevels(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPriceLevel>>;
    public masterTablesGetPriceLevels(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPriceLevel>>>;
    public masterTablesGetPriceLevels(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPriceLevel>>>;
    public masterTablesGetPriceLevels(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPriceLevel>>(`${this.basePath}/api/mastertables/pricelevels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the purchase order descriptions from the master tables.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetPurchaseOrderDescriptions(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPurchaseOrderDescription>>;
    public masterTablesGetPurchaseOrderDescriptions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPurchaseOrderDescription>>>;
    public masterTablesGetPurchaseOrderDescriptions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPurchaseOrderDescription>>>;
    public masterTablesGetPurchaseOrderDescriptions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPurchaseOrderDescription>>(`${this.basePath}/api/mastertables/purchaseorderdescriptions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of Reps.
     * 
     * @param activeOnly If true excludes inactive reps.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetReps(activeOnly?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebRepSummary>>;
    public masterTablesGetReps(activeOnly?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebRepSummary>>>;
    public masterTablesGetReps(activeOnly?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebRepSummary>>>;
    public masterTablesGetReps(activeOnly?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeOnly !== undefined) {
            queryParameters = queryParameters.set('activeOnly', <any>activeOnly);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebRepSummary>>(`${this.basePath}/api/mastertables/reps`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of Reps.
     * 
     * @param activeOnly If true excludes inactive reps.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetReps_17(activeOnly: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebRepSummary>>;
    public masterTablesGetReps_17(activeOnly: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebRepSummary>>>;
    public masterTablesGetReps_17(activeOnly: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebRepSummary>>>;
    public masterTablesGetReps_17(activeOnly: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (activeOnly === null || activeOnly === undefined) {
            throw new Error('Required parameter activeOnly was null or undefined when calling masterTablesGetReps_17.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebRepSummary>>(`${this.basePath}/api/mastertables/reps/${encodeURIComponent(String(activeOnly))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined resolutions.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetResolutions(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebResolution>>;
    public masterTablesGetResolutions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebResolution>>>;
    public masterTablesGetResolutions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebResolution>>>;
    public masterTablesGetResolutions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebResolution>>(`${this.basePath}/api/mastertables/resolutions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined SIC codes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSICCodes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSICCode>>;
    public masterTablesGetSICCodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSICCode>>>;
    public masterTablesGetSICCodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSICCode>>>;
    public masterTablesGetSICCodes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSICCode>>(`${this.basePath}/api/mastertables/siccodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the sales tax codes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSalesTaxCodes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSalesTaxCode>>;
    public masterTablesGetSalesTaxCodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSalesTaxCode>>>;
    public masterTablesGetSalesTaxCodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSalesTaxCode>>>;
    public masterTablesGetSalesTaxCodes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSalesTaxCode>>(`${this.basePath}/api/mastertables/salestaxcodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the defined service order brief descriptions.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderBriefDescriptions(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderBriefDescription>>;
    public masterTablesGetServiceOrderBriefDescriptions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderBriefDescription>>>;
    public masterTablesGetServiceOrderBriefDescriptions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderBriefDescription>>>;
    public masterTablesGetServiceOrderBriefDescriptions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderBriefDescription>>(`${this.basePath}/api/mastertables/serviceOrders/descriptions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the defined service order comments.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderComments(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderComment>>;
    public masterTablesGetServiceOrderComments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderComment>>>;
    public masterTablesGetServiceOrderComments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderComment>>>;
    public masterTablesGetServiceOrderComments(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderComment>>(`${this.basePath}/api/mastertables/serviceOrders/comments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the defined service order detail comments.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderDetailComments(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderDetailComment>>;
    public masterTablesGetServiceOrderDetailComments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderDetailComment>>>;
    public masterTablesGetServiceOrderDetailComments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderDetailComment>>>;
    public masterTablesGetServiceOrderDetailComments(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderDetailComment>>(`${this.basePath}/api/mastertables/serviceOrders/detailComments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the service order note topics.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderNoteTopics(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderNoteTopic>>;
    public masterTablesGetServiceOrderNoteTopics(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderNoteTopic>>>;
    public masterTablesGetServiceOrderNoteTopics(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderNoteTopic>>>;
    public masterTablesGetServiceOrderNoteTopics(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderNoteTopic>>(`${this.basePath}/api/mastertables/serviceOrder/noteTopics`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the service order note topics.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderNoteTopics_18(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderNoteTopic>>;
    public masterTablesGetServiceOrderNoteTopics_18(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderNoteTopic>>>;
    public masterTablesGetServiceOrderNoteTopics_18(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderNoteTopic>>>;
    public masterTablesGetServiceOrderNoteTopics_18(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetServiceOrderNoteTopics_18.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderNoteTopic>>(`${this.basePath}/api/mastertables/serviceOrder/noteTopics/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order priorities.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderPriorities(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderPriority>>;
    public masterTablesGetServiceOrderPriorities(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderPriority>>>;
    public masterTablesGetServiceOrderPriorities(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderPriority>>>;
    public masterTablesGetServiceOrderPriorities(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderPriority>>(`${this.basePath}/api/mastertables/priorities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined service order profiles.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderProfiles(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderProfile>>;
    public masterTablesGetServiceOrderProfiles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderProfile>>>;
    public masterTablesGetServiceOrderProfiles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderProfile>>>;
    public masterTablesGetServiceOrderProfiles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderProfile>>(`${this.basePath}/api/mastertables/serviceOrderProfiles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order severities.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderSeverities(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderSeverity>>;
    public masterTablesGetServiceOrderSeverities(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderSeverity>>>;
    public masterTablesGetServiceOrderSeverities(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderSeverity>>>;
    public masterTablesGetServiceOrderSeverities(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderSeverity>>(`${this.basePath}/api/mastertables/severities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order statuses.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderStatuses(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebServiceOrderStatus>;
    public masterTablesGetServiceOrderStatuses(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebServiceOrderStatus>>;
    public masterTablesGetServiceOrderStatuses(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebServiceOrderStatus>>;
    public masterTablesGetServiceOrderStatuses(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebServiceOrderStatus>(`${this.basePath}/api/mastertables/serviceorders/statuses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order statuses.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderStatuses_19(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebServiceOrderStatus>;
    public masterTablesGetServiceOrderStatuses_19(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebServiceOrderStatus>>;
    public masterTablesGetServiceOrderStatuses_19(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebServiceOrderStatus>>;
    public masterTablesGetServiceOrderStatuses_19(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetServiceOrderStatuses_19.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebServiceOrderStatus>(`${this.basePath}/api/mastertables/serviceorders/statuses/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderTemplates(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderTemplate>>;
    public masterTablesGetServiceOrderTemplates(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderTemplate>>>;
    public masterTablesGetServiceOrderTemplates(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderTemplate>>>;
    public masterTablesGetServiceOrderTemplates(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderTemplate>>(`${this.basePath}/api/mastertables/serviceorders/templates`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order types.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderTypes(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderType>>;
    public masterTablesGetServiceOrderTypes(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderType>>>;
    public masterTablesGetServiceOrderTypes(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderType>>>;
    public masterTablesGetServiceOrderTypes(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderType>>(`${this.basePath}/api/mastertables/serviceOrders/types`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of defined service order types.
     * 
     * @param excludeSystemEntries 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceOrderTypes_20(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceOrderType>>;
    public masterTablesGetServiceOrderTypes_20(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceOrderType>>>;
    public masterTablesGetServiceOrderTypes_20(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceOrderType>>>;
    public masterTablesGetServiceOrderTypes_20(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetServiceOrderTypes_20.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceOrderType>>(`${this.basePath}/api/mastertables/serviceOrders/types/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined service zones.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetServiceZones(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebServiceZone>>;
    public masterTablesGetServiceZones(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebServiceZone>>>;
    public masterTablesGetServiceZones(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebServiceZone>>>;
    public masterTablesGetServiceZones(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebServiceZone>>(`${this.basePath}/api/mastertables/servicezones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns shippers stored in the master tables.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetShippers(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebShipper>>;
    public masterTablesGetShippers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebShipper>>>;
    public masterTablesGetShippers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebShipper>>>;
    public masterTablesGetShippers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebShipper>>(`${this.basePath}/api/mastertables/shippers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the shipping methods.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetShippingMethods(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebShippingMethod>>;
    public masterTablesGetShippingMethods(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebShippingMethod>>>;
    public masterTablesGetShippingMethods(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebShippingMethod>>>;
    public masterTablesGetShippingMethods(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebShippingMethod>>(`${this.basePath}/api/mastertables/shippingmethods`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined states.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetStates(excludeSystemEntries?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebState>>;
    public masterTablesGetStates(excludeSystemEntries?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebState>>>;
    public masterTablesGetStates(excludeSystemEntries?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebState>>>;
    public masterTablesGetStates(excludeSystemEntries?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebState>>(`${this.basePath}/api/mastertables/states`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined states.
     * 
     * @param excludeSystemEntries If true excludes master table system entries.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetStates_21(excludeSystemEntries: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebState>>;
    public masterTablesGetStates_21(excludeSystemEntries: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebState>>>;
    public masterTablesGetStates_21(excludeSystemEntries: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebState>>>;
    public masterTablesGetStates_21(excludeSystemEntries: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling masterTablesGetStates_21.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebState>>(`${this.basePath}/api/mastertables/states/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the sub contractors.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSubContractors(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSubContractor>>;
    public masterTablesGetSubContractors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSubContractor>>>;
    public masterTablesGetSubContractors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSubContractor>>>;
    public masterTablesGetSubContractors(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSubContractor>>(`${this.basePath}/api/mastertables/subcontractors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the systems.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSupportedSystems(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSupportedSystem>>;
    public masterTablesGetSupportedSystems(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSupportedSystem>>>;
    public masterTablesGetSupportedSystems(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSupportedSystem>>>;
    public masterTablesGetSupportedSystems(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSupportedSystem>>(`${this.basePath}/api/mastertables/systems`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the defined symptoms.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSymptoms(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSymptom>>;
    public masterTablesGetSymptoms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSymptom>>>;
    public masterTablesGetSymptoms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSymptom>>>;
    public masterTablesGetSymptoms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSymptom>>(`${this.basePath}/api/mastertables/symptoms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the system types.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetSystemTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebSystemType>>;
    public masterTablesGetSystemTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebSystemType>>>;
    public masterTablesGetSystemTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebSystemType>>>;
    public masterTablesGetSystemTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebSystemType>>(`${this.basePath}/api/mastertables/systemtypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the task action plans.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTaskActionPlans(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTaskActionPlan>>;
    public masterTablesGetTaskActionPlans(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTaskActionPlan>>>;
    public masterTablesGetTaskActionPlans(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTaskActionPlan>>>;
    public masterTablesGetTaskActionPlans(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTaskActionPlan>>(`${this.basePath}/api/mastertables/tasks/actionplans`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the task action.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTaskActions(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTaskAction>>;
    public masterTablesGetTaskActions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTaskAction>>>;
    public masterTablesGetTaskActions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTaskAction>>>;
    public masterTablesGetTaskActions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTaskAction>>(`${this.basePath}/api/mastertables/tasks/actions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the task checklist tempaltes.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTaskCheckListTemplates(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTaskCheckListTemplate>>;
    public masterTablesGetTaskCheckListTemplates(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTaskCheckListTemplate>>>;
    public masterTablesGetTaskCheckListTemplates(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTaskCheckListTemplate>>>;
    public masterTablesGetTaskCheckListTemplates(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTaskCheckListTemplate>>(`${this.basePath}/api/mastertables/tasks/checklisttemplates`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the tasklibrary.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTaskLibraries(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTaskLibrary>>;
    public masterTablesGetTaskLibraries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTaskLibrary>>>;
    public masterTablesGetTaskLibraries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTaskLibrary>>>;
    public masterTablesGetTaskLibraries(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTaskLibrary>>(`${this.basePath}/api/mastertables/tasks/libraries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a list of the task resources.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTaskResources(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTaskResource>>;
    public masterTablesGetTaskResources(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTaskResource>>>;
    public masterTablesGetTaskResources(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTaskResource>>>;
    public masterTablesGetTaskResources(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTaskResource>>(`${this.basePath}/api/mastertables/tasks/resources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the time entry reasons.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTimeEntryReasons(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTimeEntryReason>>;
    public masterTablesGetTimeEntryReasons(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTimeEntryReason>>>;
    public masterTablesGetTimeEntryReasons(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTimeEntryReason>>>;
    public masterTablesGetTimeEntryReasons(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTimeEntryReason>>(`${this.basePath}/api/mastertables/timeentryreasons`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the titles.
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesGetTitles(observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebTitle>>;
    public masterTablesGetTitles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebTitle>>>;
    public masterTablesGetTitles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebTitle>>>;
    public masterTablesGetTitles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebTitle>>(`${this.basePath}/api/mastertables/titles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the account custom field category.
     * To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesUpdateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateAccountCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateAccountCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/accounts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the contact custom field category.
     * To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesUpdateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateContactCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateContactCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/contacts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the the ContractMeter.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateContractMeter(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateContractMeter(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateContractMeter(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateContractMeter(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateContractMeter.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/contracts/meters`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the the Contract Meter group.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateContractMeterGroup(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateContractMeterGroup(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateContractMeterGroup(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateContractMeterGroup(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateContractMeterGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/contracts/metergroups`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the custom field.
     * 
     * @param customFieldID The custom field identifier.
     * @param model The custom field defintion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateCustomFieldDefinition(customFieldID: number, model: TsiWebCustomFieldDefinitionModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldDefinitionResponse>;
    public masterTablesUpdateCustomFieldDefinition(customFieldID: number, model: TsiWebCustomFieldDefinitionModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesUpdateCustomFieldDefinition(customFieldID: number, model: TsiWebCustomFieldDefinitionModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldDefinitionResponse>>;
    public masterTablesUpdateCustomFieldDefinition(customFieldID: number, model: TsiWebCustomFieldDefinitionModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (customFieldID === null || customFieldID === undefined) {
            throw new Error('Required parameter customFieldID was null or undefined when calling masterTablesUpdateCustomFieldDefinition.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateCustomFieldDefinition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldDefinitionResponse>(`${this.basePath}/api/mastertables/customfields/definitions/${encodeURIComponent(String(customFieldID))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an expense payment type.
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateExpensePaymentType(request: TsiWebUpdateExpensePaymentTypeRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebExpensePaymentTypesResponse>;
    public masterTablesUpdateExpensePaymentType(request: TsiWebUpdateExpensePaymentTypeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebExpensePaymentTypesResponse>>;
    public masterTablesUpdateExpensePaymentType(request: TsiWebUpdateExpensePaymentTypeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebExpensePaymentTypesResponse>>;
    public masterTablesUpdateExpensePaymentType(request: TsiWebUpdateExpensePaymentTypeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateExpensePaymentType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebExpensePaymentTypesResponse>(`${this.basePath}/api/mastertables/expensepaymenttypes`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an expense type.
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateExpenseType(request: TsiWebUpdateExpenseTypeRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebExpenseTypesResponse>;
    public masterTablesUpdateExpenseType(request: TsiWebUpdateExpenseTypeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebExpenseTypesResponse>>;
    public masterTablesUpdateExpenseType(request: TsiWebUpdateExpenseTypeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebExpenseTypesResponse>>;
    public masterTablesUpdateExpenseType(request: TsiWebUpdateExpenseTypeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateExpenseType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebExpenseTypesResponse>(`${this.basePath}/api/mastertables/expenseTypes`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the journal action.
     * ExistingAction is required and is used identify the Journal Action to update.  Action is the value to change the existing Journal Action to.   If Action is excluded from the PUT the Journal Action value will not change.  If Weight is excluded from the PUT it will be defaulted to 0 overwriting the existing value.
     * @param request A request used to update the existing journal action.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateJournalAction(request: TsiWebUpdateJournalActionRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalActionsResponse>;
    public masterTablesUpdateJournalAction(request: TsiWebUpdateJournalActionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalActionsResponse>>;
    public masterTablesUpdateJournalAction(request: TsiWebUpdateJournalActionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalActionsResponse>>;
    public masterTablesUpdateJournalAction(request: TsiWebUpdateJournalActionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateJournalAction.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebJournalActionsResponse>(`${this.basePath}/api/mastertables/journal/actions`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the journal topic.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateJournalTopic(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateJournalTopic(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateJournalTopic(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateJournalTopic(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateJournalTopic.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/journal/topics`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the opportunity custom field category.
     * To update the category name PreviousCategoryName is required and should equal the existing category name.               When updating a category name make sure to specify the AvailableInGui as true if the category should be available in the desktop.              The existing field definitions will be updated to reflect the name change.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldCategoryResponse>;
    public masterTablesUpdateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldCategoryResponse>>;
    public masterTablesUpdateOpportunityCustomFieldCategory(request: TsiWebCustomFieldCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling masterTablesUpdateOpportunityCustomFieldCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldCategoryResponse>(`${this.basePath}/api/mastertables/customfields/categories/opportunities`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the the Resolution.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateResolution(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateResolution(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateResolution(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateResolution(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateResolution.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/resolutions`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the the Service Order Profile.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateServiceOrderProfile(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateServiceOrderProfile(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateServiceOrderProfile(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateServiceOrderProfile(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateServiceOrderProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/serviceOrderProfiles`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the the Symptom.
     * 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateSymptom(model: TsiWebUpdateEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebMasterTableResponse>;
    public masterTablesUpdateSymptom(model: TsiWebUpdateEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebMasterTableResponse>>;
    public masterTablesUpdateSymptom(model: TsiWebUpdateEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebMasterTableResponse>>;
    public masterTablesUpdateSymptom(model: TsiWebUpdateEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling masterTablesUpdateSymptom.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebMasterTableResponse>(`${this.basePath}/api/mastertables/symptoms`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a master table time entry reason.  &lt;remarks&gt;&lt;p&gt;         The AppliedTo Type field accepts values \&quot;TimeLogs\&quot;, \&quot;TimeSlips\&quot;, or \&quot;Both\&quot;. All the values are case sensitive.         The BillingOption Type field accepts value \&quot;ApplyToContract\&quot;, \&quot;ApplyToContractAndBillcustomer\&quot;, \&quot;DoNotInvoice\&quot;,\&quot;InvoiceCustomer\&quot;, \&quot;Business\&quot;, \&quot;Personal\&quot;      &lt;/p&gt;&lt;p&gt;         Value for RGBColor field in the request should be an RGB value of type integer. For example RGB value for white is (256*256*256*) &#x3D; 16777215      &lt;/p&gt;&lt;p&gt;        Valid values for rate basis field are \&quot;Regular\&quot;, \&quot;Overtime\&quot;, \&quot;Premium\&quot; and \&quot;Flat Fee\&quot;      &lt;/p&gt;&lt;/remarks&gt;
     * 
     * @param reason 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterTablesUpdateTimeEntryReason(reason: TsiWebUpdateTimeEntryReasonRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTimeEntryReasonResponse>;
    public masterTablesUpdateTimeEntryReason(reason: TsiWebUpdateTimeEntryReasonRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTimeEntryReasonResponse>>;
    public masterTablesUpdateTimeEntryReason(reason: TsiWebUpdateTimeEntryReasonRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTimeEntryReasonResponse>>;
    public masterTablesUpdateTimeEntryReason(reason: TsiWebUpdateTimeEntryReasonRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reason === null || reason === undefined) {
            throw new Error('Required parameter reason was null or undefined when calling masterTablesUpdateTimeEntryReason.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebTimeEntryReasonResponse>(`${this.basePath}/api/mastertables/timeentryreasons`,
            reason,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
