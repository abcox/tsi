/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAssemblyItem } from '../model/tsiWebAssemblyItem';
import { TsiWebCreatePriceBookItemModel } from '../model/tsiWebCreatePriceBookItemModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebLocationDetail } from '../model/tsiWebLocationDetail';
import { TsiWebMovementLog } from '../model/tsiWebMovementLog';
import { TsiWebPriceBookItemDetail } from '../model/tsiWebPriceBookItemDetail';
import { TsiWebPriceBookItemResponse } from '../model/tsiWebPriceBookItemResponse';
import { TsiWebPriceBookItemSummary } from '../model/tsiWebPriceBookItemSummary';
import { TsiWebSearchAccountResponse } from '../model/tsiWebSearchAccountResponse';
import { TsiWebSearchPriceBookResponse } from '../model/tsiWebSearchPriceBookResponse';
import { TsiWebUpdatePriceBookItemModel } from '../model/tsiWebUpdatePriceBookItemModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PriceBookService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for Pricebook.
     * &lt;p&gt;Valid SearchType &#x3D; ItemId, ItemDescription, ItemType, MfgPartNumber, OurPartNumber, Upc, VendorPartNumber, AllItemIds, GlobalPricebook, ItemIdWithInactive, Category, CustomField (requires CategoryName and CustomFieldName)&lt;/p&gt;  &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling priceBookAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        
        // todo.. refactor the path to config file..
        this.basePath = 'https://api2.tigerpawsoftware.com'; // todo.. temp override until I can figure out how to pass this in correctly!
        let url = `/api/pricebook/items/search`;

        headers = this.configuration.setAuthHeaders(
            headers,
            "post", // httpMethod
            url,    // uri
            );
        url = `${this.basePath}${url}`;


        return this.httpClient.post<TsiWebSearchPriceBookResponse>(
            url,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a price book item.
     * 
     * @param priceBookItem The price book item to add.
     * @param calculateClosedAssemblyCost If set to true calculate the BaseCost of the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookCreatePriceBookItem(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookCreatePriceBookItem(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItem(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItem(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItem === null || priceBookItem === undefined) {
            throw new Error('Required parameter priceBookItem was null or undefined when calling priceBookCreatePriceBookItem.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (calculateClosedAssemblyCost !== undefined) {
            queryParameters = queryParameters.set('calculateClosedAssemblyCost', <any>calculateClosedAssemblyCost);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        
        // todo.. refactor the path to config file..
        this.basePath = 'https://api2.tigerpawsoftware.com'; // todo.. temp override until I can figure out how to pass this in correctly!
        let url = `/api/pricebook/items`;

        headers = this.configuration.setAuthHeaders(
            headers,
            "post", // httpMethod
            url,    // uri
            );
        url = `${this.basePath}${url}`;


        return this.httpClient.post<TsiWebPriceBookItemResponse>(
            url,
            priceBookItem,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an assembly detail item on an existing assembly.
     * 
     * @param priceBookItemNumber The price book number.
     * @param assemblyItem The assembly item to add.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookCreatePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookCreatePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookCreatePriceBookItemAssemblyDetail.');
        }
        if (assemblyItem === null || assemblyItem === undefined) {
            throw new Error('Required parameter assemblyItem was null or undefined when calling priceBookCreatePriceBookItemAssemblyDetail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recalculateClosedAssemblyCost !== undefined) {
            queryParameters = queryParameters.set('recalculateClosedAssemblyCost', <any>recalculateClosedAssemblyCost);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/assembly`,
            assemblyItem,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates an assembly detail item on an existing assembly.
     * 
     * @param priceBookItemNumber The price book number.
     * @param assemblyItem The assembly item to add.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookCreatePriceBookItemAssemblyDetail_1(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookCreatePriceBookItemAssemblyDetail_1(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItemAssemblyDetail_1(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItemAssemblyDetail_1(priceBookItemNumber: number, assemblyItem: TsiWebAssemblyItem, recalculateClosedAssemblyCost: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookCreatePriceBookItemAssemblyDetail_1.');
        }
        if (assemblyItem === null || assemblyItem === undefined) {
            throw new Error('Required parameter assemblyItem was null or undefined when calling priceBookCreatePriceBookItemAssemblyDetail_1.');
        }
        if (recalculateClosedAssemblyCost === null || recalculateClosedAssemblyCost === undefined) {
            throw new Error('Required parameter recalculateClosedAssemblyCost was null or undefined when calling priceBookCreatePriceBookItemAssemblyDetail_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/assembly/${encodeURIComponent(String(recalculateClosedAssemblyCost))}`,
            assemblyItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a price book item.
     * 
     * @param priceBookItem The price book item to add.
     * @param calculateClosedAssemblyCost If set to true calculate the BaseCost of the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookCreatePriceBookItem_2(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookCreatePriceBookItem_2(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItem_2(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookCreatePriceBookItem_2(priceBookItem: TsiWebCreatePriceBookItemModel, calculateClosedAssemblyCost: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItem === null || priceBookItem === undefined) {
            throw new Error('Required parameter priceBookItem was null or undefined when calling priceBookCreatePriceBookItem_2.');
        }
        if (calculateClosedAssemblyCost === null || calculateClosedAssemblyCost === undefined) {
            throw new Error('Required parameter calculateClosedAssemblyCost was null or undefined when calling priceBookCreatePriceBookItem_2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(calculateClosedAssemblyCost))}`,
            priceBookItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an assembly detail item.
     * 
     * @param priceBookItemNumber The price book number.
     * @param assemblyDetailNumber The assembly detail number.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookDeletePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyDetailNumber: number, recalculateClosedAssemblyCost: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookDeletePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyDetailNumber: number, recalculateClosedAssemblyCost: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookDeletePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyDetailNumber: number, recalculateClosedAssemblyCost: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookDeletePriceBookItemAssemblyDetail(priceBookItemNumber: number, assemblyDetailNumber: number, recalculateClosedAssemblyCost: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookDeletePriceBookItemAssemblyDetail.');
        }
        if (assemblyDetailNumber === null || assemblyDetailNumber === undefined) {
            throw new Error('Required parameter assemblyDetailNumber was null or undefined when calling priceBookDeletePriceBookItemAssemblyDetail.');
        }
        if (recalculateClosedAssemblyCost === null || recalculateClosedAssemblyCost === undefined) {
            throw new Error('Required parameter recalculateClosedAssemblyCost was null or undefined when calling priceBookDeletePriceBookItemAssemblyDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/assembly/details/${encodeURIComponent(String(assemblyDetailNumber))}/${encodeURIComponent(String(recalculateClosedAssemblyCost))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for a quote.
     * 
     * @param priceBooItemNumber The price book item number.
     * @param priceBookItemNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetCustomFields(priceBooItemNumber: number, priceBookItemNumber: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public priceBookGetCustomFields(priceBooItemNumber: number, priceBookItemNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public priceBookGetCustomFields(priceBooItemNumber: number, priceBookItemNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public priceBookGetCustomFields(priceBooItemNumber: number, priceBookItemNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBooItemNumber === null || priceBooItemNumber === undefined) {
            throw new Error('Required parameter priceBooItemNumber was null or undefined when calling priceBookGetCustomFields.');
        }
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookGetCustomFields.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceBooItemNumber !== undefined) {
            queryParameters = queryParameters.set('priceBooItemNumber', <any>priceBooItemNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/customfields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields by item id.
     * 
     * @param itemId The item id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetCustomFieldsByItemId(itemId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public priceBookGetCustomFieldsByItemId(itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public priceBookGetCustomFieldsByItemId(itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public priceBookGetCustomFieldsByItemId(itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling priceBookGetCustomFieldsByItemId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/pricebook/items/customfields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the location details of a price book item.
     * 
     * @param itemId The Item Id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetLocations(itemId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebLocationDetail>>;
    public priceBookGetLocations(itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebLocationDetail>>>;
    public priceBookGetLocations(itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebLocationDetail>>>;
    public priceBookGetLocations(itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling priceBookGetLocations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebLocationDetail>>(`${this.basePath}/api/pricebook/items/location`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the location details of a price book item.
     * 
     * @param priceBookItemNumber The price book item number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetLocationsByPriceBookNumber(priceBookItemNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebLocationDetail>>;
    public priceBookGetLocationsByPriceBookNumber(priceBookItemNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebLocationDetail>>>;
    public priceBookGetLocationsByPriceBookNumber(priceBookItemNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebLocationDetail>>>;
    public priceBookGetLocationsByPriceBookNumber(priceBookItemNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookGetLocationsByPriceBookNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebLocationDetail>>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/location`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the movement logs for a price book item.
     * 
     * @param itemId The Item Id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetMovementLogs(itemId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMovementLog>>;
    public priceBookGetMovementLogs(itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMovementLog>>>;
    public priceBookGetMovementLogs(itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMovementLog>>>;
    public priceBookGetMovementLogs(itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling priceBookGetMovementLogs.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMovementLog>>(`${this.basePath}/api/pricebook/items/movementlog`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the movement logs for a price book item.
     * 
     * @param priceBookItemNumber The price book item number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetMovementLogsByPriceBookNumber(priceBookItemNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebMovementLog>>;
    public priceBookGetMovementLogsByPriceBookNumber(priceBookItemNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebMovementLog>>>;
    public priceBookGetMovementLogsByPriceBookNumber(priceBookItemNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebMovementLog>>>;
    public priceBookGetMovementLogsByPriceBookNumber(priceBookItemNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookGetMovementLogsByPriceBookNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebMovementLog>>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/movementlog`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the details of a price book item.
     * 
     * @param itemId The item identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetPriceBookDetails(itemId: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemDetail>;
    public priceBookGetPriceBookDetails(itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemDetail>>;
    public priceBookGetPriceBookDetails(itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemDetail>>;
    public priceBookGetPriceBookDetails(itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling priceBookGetPriceBookDetails.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPriceBookItemDetail>(`${this.basePath}/api/pricebook/items/details`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the details of a price book item.
     * 
     * @param priceBookItemNumber The price book item number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetPriceBookDetailsByPriceBookNumber(priceBookItemNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemDetail>;
    public priceBookGetPriceBookDetailsByPriceBookNumber(priceBookItemNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemDetail>>;
    public priceBookGetPriceBookDetailsByPriceBookNumber(priceBookItemNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemDetail>>;
    public priceBookGetPriceBookDetailsByPriceBookNumber(priceBookItemNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookGetPriceBookDetailsByPriceBookNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPriceBookItemDetail>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a summary of the price book item.
     * 
     * @param itemId The Item Id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetPriceBookSummary(itemId: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemSummary>;
    public priceBookGetPriceBookSummary(itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemSummary>>;
    public priceBookGetPriceBookSummary(itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemSummary>>;
    public priceBookGetPriceBookSummary(itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling priceBookGetPriceBookSummary.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (itemId !== undefined) {
            queryParameters = queryParameters.set('itemId', <any>itemId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPriceBookItemSummary>(`${this.basePath}/api/pricebook/items`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a summary of the price book item.
     * 
     * @param priceBookItemNumber The price book item number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookGetPriceBookSummaryByPriceBookNumber(priceBookItemNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemSummary>;
    public priceBookGetPriceBookSummaryByPriceBookNumber(priceBookItemNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemSummary>>;
    public priceBookGetPriceBookSummaryByPriceBookNumber(priceBookItemNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemSummary>>;
    public priceBookGetPriceBookSummaryByPriceBookNumber(priceBookItemNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookGetPriceBookSummaryByPriceBookNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPriceBookItemSummary>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by category.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByCategory(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByCategory(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByCategory(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByCategory(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByCategory.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/category`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Pricebook using a custom category and field label.
     * 
     * @param model A {Tsi.Web.CustomFieldSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public priceBookSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public priceBookSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public priceBookSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling priceBookSearchByCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/pricebook/items/search/customfield`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by any criteria.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByGlobalPricebook(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByGlobalPricebook(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByGlobalPricebook(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByGlobalPricebook(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByGlobalPricebook.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/global`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by item description.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByItemDescription.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        
        // todo.. refactor the path to config file..
        this.basePath = 'https://api2.tigerpawsoftware.com'; // todo.. temp override until I can figure out how to pass this in correctly!
        let url = `/api/pricebook/items/search/itemdescription`;

        headers = this.configuration.setAuthHeaders(
            headers,
            "post", // httpMethod
            url,    // uri
            );
        url = `${this.basePath}${url}`;


        return this.httpClient.post<TsiWebSearchPriceBookResponse>(
            url,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by itemID.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param activeOnly if set to true searches only the active item ids.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByItemId(criteria: string, activeOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByItemId(criteria: string, activeOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemId(criteria: string, activeOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemId(criteria: string, activeOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByItemId.');
        }
        if (activeOnly === null || activeOnly === undefined) {
            throw new Error('Required parameter activeOnly was null or undefined when calling priceBookSearchByItemId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/itemid/${encodeURIComponent(String(activeOnly))}`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by item type.
     * &lt;p&gt;Valid criteria for ItemType search is M, A, L, S, F. The search defaults to a match type of Equal and does not support wild card charaters.&lt;/p&gt;
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByItemType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByItemType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByItemType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByItemType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/type`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by mfg partnumber.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByMfgPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByMfgPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByMfgPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByMfgPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByMfgPartNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/mfgpartnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by our partnumber.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByOurPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByOurPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByOurPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByOurPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByOurPartNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/ourpartnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by UPC.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByUpc(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByUpc(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByUpc(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByUpc(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByUpc.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/upc`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search pricebook by Vendor part number.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookSearchByVendorPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchPriceBookResponse>;
    public priceBookSearchByVendorPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByVendorPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchPriceBookResponse>>;
    public priceBookSearchByVendorPartNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling priceBookSearchByVendorPartNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchPriceBookResponse>(`${this.basePath}/api/pricebook/items/search/vendorpartnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the custom fields for a price book item.
     * 
     * @param priceBooItemNumber The price boo item number.
     * @param customFields The custom fields.
     * @param priceBookItemNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookUpdateCustomFields(priceBooItemNumber: number, customFields: Array<TsiWebCustomField>, priceBookItemNumber: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public priceBookUpdateCustomFields(priceBooItemNumber: number, customFields: Array<TsiWebCustomField>, priceBookItemNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public priceBookUpdateCustomFields(priceBooItemNumber: number, customFields: Array<TsiWebCustomField>, priceBookItemNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public priceBookUpdateCustomFields(priceBooItemNumber: number, customFields: Array<TsiWebCustomField>, priceBookItemNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBooItemNumber === null || priceBooItemNumber === undefined) {
            throw new Error('Required parameter priceBooItemNumber was null or undefined when calling priceBookUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling priceBookUpdateCustomFields.');
        }
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookUpdateCustomFields.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceBooItemNumber !== undefined) {
            queryParameters = queryParameters.set('priceBooItemNumber', <any>priceBooItemNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/customfields`,
            customFields,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a price book item.
     * 
     * @param priceBookItemNumber The price book number.
     * @param priceBookItem The updated price book item.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookUpdatePriceBookItem(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookUpdatePriceBookItem(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItem(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItem(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookUpdatePriceBookItem.');
        }
        if (priceBookItem === null || priceBookItem === undefined) {
            throw new Error('Required parameter priceBookItem was null or undefined when calling priceBookUpdatePriceBookItem.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (recalculateClosedAssemblyCost !== undefined) {
            queryParameters = queryParameters.set('recalculateClosedAssemblyCost', <any>recalculateClosedAssemblyCost);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}`,
            priceBookItem,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates assembly detail quantity.
     * 
     * @param priceBookItemNumber The price book number.
     * @param assemblyDetailNumber The assembly detail number.
     * @param quantity The quantity.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookUpdatePriceBookItemAssemblyDetailQuantity(priceBookItemNumber: number, assemblyDetailNumber: number, quantity: number, recalculateClosedAssemblyCost: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookUpdatePriceBookItemAssemblyDetailQuantity(priceBookItemNumber: number, assemblyDetailNumber: number, quantity: number, recalculateClosedAssemblyCost: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItemAssemblyDetailQuantity(priceBookItemNumber: number, assemblyDetailNumber: number, quantity: number, recalculateClosedAssemblyCost: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItemAssemblyDetailQuantity(priceBookItemNumber: number, assemblyDetailNumber: number, quantity: number, recalculateClosedAssemblyCost: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookUpdatePriceBookItemAssemblyDetailQuantity.');
        }
        if (assemblyDetailNumber === null || assemblyDetailNumber === undefined) {
            throw new Error('Required parameter assemblyDetailNumber was null or undefined when calling priceBookUpdatePriceBookItemAssemblyDetailQuantity.');
        }
        if (quantity === null || quantity === undefined) {
            throw new Error('Required parameter quantity was null or undefined when calling priceBookUpdatePriceBookItemAssemblyDetailQuantity.');
        }
        if (recalculateClosedAssemblyCost === null || recalculateClosedAssemblyCost === undefined) {
            throw new Error('Required parameter recalculateClosedAssemblyCost was null or undefined when calling priceBookUpdatePriceBookItemAssemblyDetailQuantity.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/assembly/details/${encodeURIComponent(String(assemblyDetailNumber))}/quantity/${encodeURIComponent(String(quantity))}/${encodeURIComponent(String(recalculateClosedAssemblyCost))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a price book item.
     * 
     * @param priceBookItemNumber The price book number.
     * @param priceBookItem The updated price book item.
     * @param recalculateClosedAssemblyCost If set to true forces the cost to be recalcuated for the closed assembly.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBookUpdatePriceBookItem_3(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPriceBookItemResponse>;
    public priceBookUpdatePriceBookItem_3(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItem_3(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPriceBookItemResponse>>;
    public priceBookUpdatePriceBookItem_3(priceBookItemNumber: number, priceBookItem: TsiWebUpdatePriceBookItemModel, recalculateClosedAssemblyCost: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (priceBookItemNumber === null || priceBookItemNumber === undefined) {
            throw new Error('Required parameter priceBookItemNumber was null or undefined when calling priceBookUpdatePriceBookItem_3.');
        }
        if (priceBookItem === null || priceBookItem === undefined) {
            throw new Error('Required parameter priceBookItem was null or undefined when calling priceBookUpdatePriceBookItem_3.');
        }
        if (recalculateClosedAssemblyCost === null || recalculateClosedAssemblyCost === undefined) {
            throw new Error('Required parameter recalculateClosedAssemblyCost was null or undefined when calling priceBookUpdatePriceBookItem_3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebPriceBookItemResponse>(`${this.basePath}/api/pricebook/items/${encodeURIComponent(String(priceBookItemNumber))}/${encodeURIComponent(String(recalculateClosedAssemblyCost))}`,
            priceBookItem,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
