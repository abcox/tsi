/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAddQuoteToExistingServiceOrderModel } from '../model/tsiWebAddQuoteToExistingServiceOrderModel';
import { TsiWebAddQuoteToNewServiceOrderModel } from '../model/tsiWebAddQuoteToNewServiceOrderModel';
import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAreasWebApiUpdateDocumentModel } from '../model/tsiWebAreasWebApiUpdateDocumentModel';
import { TsiWebCreateQuoteDetailCommentModel } from '../model/tsiWebCreateQuoteDetailCommentModel';
import { TsiWebCreateQuoteDetailItemModel } from '../model/tsiWebCreateQuoteDetailItemModel';
import { TsiWebCreateQuoteDetailNonStockModel } from '../model/tsiWebCreateQuoteDetailNonStockModel';
import { TsiWebCreateQuoteDetailSubTotalModel } from '../model/tsiWebCreateQuoteDetailSubTotalModel';
import { TsiWebCreateQuoteModel } from '../model/tsiWebCreateQuoteModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebDocumentResponse } from '../model/tsiWebDocumentResponse';
import { TsiWebDocumentSummary } from '../model/tsiWebDocumentSummary';
import { TsiWebDocumentsResponse } from '../model/tsiWebDocumentsResponse';
import { TsiWebQuoteDetail } from '../model/tsiWebQuoteDetail';
import { TsiWebQuoteDetailCommentModel } from '../model/tsiWebQuoteDetailCommentModel';
import { TsiWebQuoteDetailItemModel } from '../model/tsiWebQuoteDetailItemModel';
import { TsiWebQuoteDetailResponse } from '../model/tsiWebQuoteDetailResponse';
import { TsiWebQuoteDetailSubtotalModel } from '../model/tsiWebQuoteDetailSubtotalModel';
import { TsiWebQuoteNoteModel } from '../model/tsiWebQuoteNoteModel';
import { TsiWebQuoteNoteResponse } from '../model/tsiWebQuoteNoteResponse';
import { TsiWebQuoteNotesResponse } from '../model/tsiWebQuoteNotesResponse';
import { TsiWebQuoteRelatedDocuments } from '../model/tsiWebQuoteRelatedDocuments';
import { TsiWebQuoteResponse } from '../model/tsiWebQuoteResponse';
import { TsiWebQuoteSummary } from '../model/tsiWebQuoteSummary';
import { TsiWebQuoteToServiceOrderResponse } from '../model/tsiWebQuoteToServiceOrderResponse';
import { TsiWebResponse } from '../model/tsiWebResponse';
import { TsiWebSearchContactResponse } from '../model/tsiWebSearchContactResponse';
import { TsiWebSearchQuotesResponse } from '../model/tsiWebSearchQuotesResponse';
import { TsiWebTasksResponse } from '../model/tsiWebTasksResponse';
import { TsiWebUpdateQuoteModel } from '../model/tsiWebUpdateQuoteModel';
import { TsiWebWorkOrderResponse } from '../model/tsiWebWorkOrderResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class QuotesService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a quote to an existing service order.
     * QuoteToSOtype value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;
     * @param quoteNumber The quote number.
     * @param serviceOrderNumber The service order number.
     * @param model The model.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesAddQuoteToExistingServiceOrder(quoteNumber: number, serviceOrderNumber: number, model: TsiWebAddQuoteToExistingServiceOrderModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteToServiceOrderResponse>;
    public quotesAddQuoteToExistingServiceOrder(quoteNumber: number, serviceOrderNumber: number, model: TsiWebAddQuoteToExistingServiceOrderModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteToServiceOrderResponse>>;
    public quotesAddQuoteToExistingServiceOrder(quoteNumber: number, serviceOrderNumber: number, model: TsiWebAddQuoteToExistingServiceOrderModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteToServiceOrderResponse>>;
    public quotesAddQuoteToExistingServiceOrder(quoteNumber: number, serviceOrderNumber: number, model: TsiWebAddQuoteToExistingServiceOrderModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesAddQuoteToExistingServiceOrder.');
        }
        if (serviceOrderNumber === null || serviceOrderNumber === undefined) {
            throw new Error('Required parameter serviceOrderNumber was null or undefined when calling quotesAddQuoteToExistingServiceOrder.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesAddQuoteToExistingServiceOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteToServiceOrderResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/convert/serviceOrder/${encodeURIComponent(String(serviceOrderNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a quote to a new service order.
     * The \&quot;QuoteToSOtype\&quot; value must be one of: \&quot;AllItemsOnQuote\&quot;, \&quot;AllItemsInPhase\&quot;, \&quot;SpecificItemsOnQuote\&quot;, \&quot;SpecificItemsInPhase\&quot;.&lt;br /&gt;&lt;p&gt;The field NewServiceOrderPhaseNumber is used to indicate the name phase whihch you would like the Service Order to be on, if left empty the phase from the quote will be used.&lt;/p&gt;&lt;p&gt;The ProjectPhaseNumber is used to indicate the phase used for AllItemsInPhase or SpecificItemsInPhase.&lt;/p&gt;&lt;p&gt;DateTimeRequested is an optional SplitDateTime type. Json format is \&quot;DateTimeRequested\&quot;:{\&quot;Date\&quot;:\&quot;2018-03-06T00:00:00\&quot;, \&quot;Time\&quot;:\&quot;1900-01-01T14:09:02\&quot;}&lt;/p&gt;
     * @param quoteNumber 
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesAddQuoteToNewServiceOrder(quoteNumber: number, model: TsiWebAddQuoteToNewServiceOrderModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteToServiceOrderResponse>;
    public quotesAddQuoteToNewServiceOrder(quoteNumber: number, model: TsiWebAddQuoteToNewServiceOrderModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteToServiceOrderResponse>>;
    public quotesAddQuoteToNewServiceOrder(quoteNumber: number, model: TsiWebAddQuoteToNewServiceOrderModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteToServiceOrderResponse>>;
    public quotesAddQuoteToNewServiceOrder(quoteNumber: number, model: TsiWebAddQuoteToNewServiceOrderModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesAddQuoteToNewServiceOrder.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesAddQuoteToNewServiceOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteToServiceOrderResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/convert/serviceOrder`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Advanced search for Quotes.
     * Valid SearchType &#x3D; QuoteNumber, Job, ItemId, ItemDescription, CustomerPO, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling quotesAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/items/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts a quote into a work order.
     * 
     * @param quoteNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesConvertQuoteToWorkOrder(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebWorkOrderResponse>;
    public quotesConvertQuoteToWorkOrder(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebWorkOrderResponse>>;
    public quotesConvertQuoteToWorkOrder(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebWorkOrderResponse>>;
    public quotesConvertQuoteToWorkOrder(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesConvertQuoteToWorkOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebWorkOrderResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/convert/workOrder`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a quote.
     * AccountNumber should be the account the quote is for.  &lt;p&gt;To duplicate a quote set the ExistingQuoteNumber.&lt;/p&gt;
     * @param request The request used to create the quote.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuote(request: TsiWebCreateQuoteModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteResponse>;
    public quotesCreateQuote(request: TsiWebCreateQuoteModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteResponse>>;
    public quotesCreateQuote(request: TsiWebCreateQuoteModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteResponse>>;
    public quotesCreateQuote(request: TsiWebCreateQuoteModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling quotesCreateQuote.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteResponse>(`${this.basePath}/api/Quotes`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the quote detail comment.
     * 
     * @param quoteNumber The quote number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteDetailComment(quoteNumber: number, model: TsiWebCreateQuoteDetailCommentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesCreateQuoteDetailComment(quoteNumber: number, model: TsiWebCreateQuoteDetailCommentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailComment(quoteNumber: number, model: TsiWebCreateQuoteDetailCommentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailComment(quoteNumber: number, model: TsiWebCreateQuoteDetailCommentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteDetailComment.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesCreateQuoteDetailComment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/comments`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the quote detail item from a price book item.
     * 
     * @param quoteNumber The quote number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteDetailItem(quoteNumber: number, model: TsiWebCreateQuoteDetailItemModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesCreateQuoteDetailItem(quoteNumber: number, model: TsiWebCreateQuoteDetailItemModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailItem(quoteNumber: number, model: TsiWebCreateQuoteDetailItemModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailItem(quoteNumber: number, model: TsiWebCreateQuoteDetailItemModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteDetailItem.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesCreateQuoteDetailItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/items/stock`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the quote detail using a non stock item.
     * 
     * @param quoteNumber The quote number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteDetailNonStock(quoteNumber: number, model: TsiWebCreateQuoteDetailNonStockModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesCreateQuoteDetailNonStock(quoteNumber: number, model: TsiWebCreateQuoteDetailNonStockModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailNonStock(quoteNumber: number, model: TsiWebCreateQuoteDetailNonStockModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailNonStock(quoteNumber: number, model: TsiWebCreateQuoteDetailNonStockModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteDetailNonStock.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesCreateQuoteDetailNonStock.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/items/nonstock`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the quote detail subtotal.
     * 
     * @param quoteNumber The quote number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteDetailSubtotal(quoteNumber: number, model: TsiWebCreateQuoteDetailSubTotalModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesCreateQuoteDetailSubtotal(quoteNumber: number, model: TsiWebCreateQuoteDetailSubTotalModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailSubtotal(quoteNumber: number, model: TsiWebCreateQuoteDetailSubTotalModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesCreateQuoteDetailSubtotal(quoteNumber: number, model: TsiWebCreateQuoteDetailSubTotalModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteDetailSubtotal.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesCreateQuoteDetailSubtotal.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/subtotals`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the quote document.
     * 
     * @param quoteNumber The quote number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteDocument(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public quotesCreateQuoteDocument(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public quotesCreateQuoteDocument(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public quotesCreateQuoteDocument(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebDocumentResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a quote note.
     * 
     * @param quoteNumber The quote number.
     * @param note The note.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesCreateQuoteNote(quoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteNoteResponse>;
    public quotesCreateQuoteNote(quoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteNoteResponse>>;
    public quotesCreateQuoteNote(quoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteNoteResponse>>;
    public quotesCreateQuoteNote(quoteNumber: number, note: TsiWebQuoteNoteModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesCreateQuoteNote.');
        }
        if (note === null || note === undefined) {
            throw new Error('Required parameter note was null or undefined when calling quotesCreateQuoteNote.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebQuoteNoteResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/notes`,
            note,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the quote detail.
     * 
     * @param quoteNumber The quote number.
     * @param quoteDetailNumber The quote detail number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesDeleteQuoteDetail(quoteNumber: number, quoteDetailNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesDeleteQuoteDetail(quoteNumber: number, quoteDetailNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesDeleteQuoteDetail(quoteNumber: number, quoteDetailNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesDeleteQuoteDetail(quoteNumber: number, quoteDetailNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesDeleteQuoteDetail.');
        }
        if (quoteDetailNumber === null || quoteDetailNumber === undefined) {
            throw new Error('Required parameter quoteDetailNumber was null or undefined when calling quotesDeleteQuoteDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/${encodeURIComponent(String(quoteDetailNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quotes for an account.
     * 
     * @param accountNumber The account number.
     * @param openOnly If set to true returns only the open Quotes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetAccountQuotes(accountNumber: number, openOnly?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public quotesGetAccountQuotes(accountNumber: number, openOnly?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public quotesGetAccountQuotes(accountNumber: number, openOnly?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public quotesGetAccountQuotes(accountNumber: number, openOnly?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling quotesGetAccountQuotes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (openOnly !== undefined) {
            queryParameters = queryParameters.set('openOnly', <any>openOnly);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/quotes/account/${encodeURIComponent(String(accountNumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quotes for an account.
     * 
     * @param accountNumber The account number.
     * @param openOnly If set to true returns only the open Quotes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetAccountQuotes_1(accountNumber: number, openOnly: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public quotesGetAccountQuotes_1(accountNumber: number, openOnly: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public quotesGetAccountQuotes_1(accountNumber: number, openOnly: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public quotesGetAccountQuotes_1(accountNumber: number, openOnly: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling quotesGetAccountQuotes_1.');
        }
        if (openOnly === null || openOnly === undefined) {
            throw new Error('Required parameter openOnly was null or undefined when calling quotesGetAccountQuotes_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/quotes/account/${encodeURIComponent(String(accountNumber))}/${encodeURIComponent(String(openOnly))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for a quote.
     * 
     * @param quoteNumber The quote number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetCustomFields(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public quotesGetCustomFields(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public quotesGetCustomFields(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public quotesGetCustomFields(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/customfields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote document file.
     * 
     * @param quoteNumber The quote number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetFile(quoteNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public quotesGetFile(quoteNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public quotesGetFile(quoteNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public quotesGetFile(quoteNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling quotesGetFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents/${encodeURIComponent(String(documentID))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quotes for an opportunity.
     * 
     * @param opportunityNumber The opportunity number.
     * @param openOnly If set to true returns only the open Quotes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetOpportunityQuotes(opportunityNumber: number, openOnly?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public quotesGetOpportunityQuotes(opportunityNumber: number, openOnly?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public quotesGetOpportunityQuotes(opportunityNumber: number, openOnly?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public quotesGetOpportunityQuotes(opportunityNumber: number, openOnly?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling quotesGetOpportunityQuotes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (openOnly !== undefined) {
            queryParameters = queryParameters.set('openOnly', <any>openOnly);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/quotes/opportunity/${encodeURIComponent(String(opportunityNumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quotes for an opportunity.
     * 
     * @param opportunityNumber The opportunity number.
     * @param openOnly If set to true returns only the open Quotes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetOpportunityQuotes_2(opportunityNumber: number, openOnly: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public quotesGetOpportunityQuotes_2(opportunityNumber: number, openOnly: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public quotesGetOpportunityQuotes_2(opportunityNumber: number, openOnly: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public quotesGetOpportunityQuotes_2(opportunityNumber: number, openOnly: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (opportunityNumber === null || opportunityNumber === undefined) {
            throw new Error('Required parameter opportunityNumber was null or undefined when calling quotesGetOpportunityQuotes_2.');
        }
        if (openOnly === null || openOnly === undefined) {
            throw new Error('Required parameter openOnly was null or undefined when calling quotesGetOpportunityQuotes_2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/quotes/opportunity/${encodeURIComponent(String(opportunityNumber))}/${encodeURIComponent(String(openOnly))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote completed tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param quoteNumber The quote number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteCompletedTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public quotesGetQuoteCompletedTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public quotesGetQuoteCompletedTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public quotesGetQuoteCompletedTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteCompletedTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/tasks/completed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote details.
     * 
     * @param quoteNumber The quote number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteDetail(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetail>;
    public quotesGetQuoteDetail(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetail>>;
    public quotesGetQuoteDetail(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetail>>;
    public quotesGetQuoteDetail(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebQuoteDetail>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a document for a quote.
     * 
     * @param quoteNumber The quote number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteDocument(quoteNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentSummary>;
    public quotesGetQuoteDocument(quoteNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentSummary>>;
    public quotesGetQuoteDocument(quoteNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentSummary>>;
    public quotesGetQuoteDocument(quoteNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteDocument.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling quotesGetQuoteDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentSummary>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the documents for a quote.
     * 
     * @param quoteNumber The quote number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteDocuments(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentsResponse>;
    public quotesGetQuoteDocuments(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentsResponse>>;
    public quotesGetQuoteDocuments(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentsResponse>>;
    public quotesGetQuoteDocuments(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteDocuments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentsResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param quoteNumber The quote number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteIncompleteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public quotesGetQuoteIncompleteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public quotesGetQuoteIncompleteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public quotesGetQuoteIncompleteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteIncompleteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/tasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote notes.
     * 
     * @param quoteNumber The quote number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteNotes(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteNotesResponse>;
    public quotesGetQuoteNotes(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteNotesResponse>>;
    public quotesGetQuoteNotes(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteNotesResponse>>;
    public quotesGetQuoteNotes(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteNotes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebQuoteNotesResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/notes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the related documents for the quote.
     * 
     * @param quoteNumber The quote number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteRelatedDocuments(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteRelatedDocuments>;
    public quotesGetQuoteRelatedDocuments(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteRelatedDocuments>>;
    public quotesGetQuoteRelatedDocuments(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteRelatedDocuments>>;
    public quotesGetQuoteRelatedDocuments(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteRelatedDocuments.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebQuoteRelatedDocuments>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/relateddocuments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a summary of the quote.
     * 
     * @param quoteNumber The quote number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteSummary(quoteNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteSummary>;
    public quotesGetQuoteSummary(quoteNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteSummary>>;
    public quotesGetQuoteSummary(quoteNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteSummary>>;
    public quotesGetQuoteSummary(quoteNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteSummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebQuoteSummary>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the quote tasks. Includes both completed and incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param quoteNumber The quote number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesGetQuoteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public quotesGetQuoteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public quotesGetQuoteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public quotesGetQuoteTasks(quoteNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesGetQuoteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/tasks/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes using a custom category and field label.
     * 
     * @param model A {Tsi.Web.CustomFieldSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesSearchByCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/customfield`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes by customer purchase order.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByCustomerPurchaseOrder(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByCustomerPurchaseOrder(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByCustomerPurchaseOrder(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByCustomerPurchaseOrder(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling quotesSearchByCustomerPurchaseOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/customerpo`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes by item description.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByItemDescription(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling quotesSearchByItemDescription.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/itemdescription`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes by item id.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByItemId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByItemId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByItemId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByItemId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling quotesSearchByItemId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/itemid`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes by Job.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByJob(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByJob(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByJob(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByJob(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling quotesSearchByJob.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/job`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Quotes by quote number.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSearchByQuoteNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchQuotesResponse>;
    public quotesSearchByQuoteNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchQuotesResponse>>;
    public quotesSearchByQuoteNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchQuotesResponse>>;
    public quotesSearchByQuoteNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling quotesSearchByQuoteNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchQuotesResponse>(`${this.basePath}/api/quotes/search/quotenumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Overwrites the quote document physical file, does not rename the file.
     * Requires a multipart/form request containing the physical file.
     * @param quoteNumber The quote number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSetQuoteDocumentFile(quoteNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public quotesSetQuoteDocumentFile(quoteNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public quotesSetQuoteDocumentFile(quoteNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public quotesSetQuoteDocumentFile(quoteNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesSetQuoteDocumentFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling quotesSetQuoteDocumentFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents/${encodeURIComponent(String(documentID))}/overwrite`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the name of the quote document file.
     * 
     * @param quoteNumber The quote number.
     * @param documentID The document identifier.
     * @param fileName Name of the file.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesSetQuoteDocumentFileName(quoteNumber: number, documentID: number, fileName: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public quotesSetQuoteDocumentFileName(quoteNumber: number, documentID: number, fileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public quotesSetQuoteDocumentFileName(quoteNumber: number, documentID: number, fileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public quotesSetQuoteDocumentFileName(quoteNumber: number, documentID: number, fileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesSetQuoteDocumentFileName.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling quotesSetQuoteDocumentFileName.');
        }
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling quotesSetQuoteDocumentFileName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents/${encodeURIComponent(String(documentID))}/rename`,
            fileName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the custom fields for a quote.
     * 
     * @param quoteNumber The quote number.
     * @param customFields The custom fields.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateCustomFields(quoteNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public quotesUpdateCustomFields(quoteNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public quotesUpdateCustomFields(quoteNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public quotesUpdateCustomFields(quoteNumber: number, customFields: Array<TsiWebCustomField>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling quotesUpdateCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/customfields`,
            customFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the quote.
     * 
     * @param quoteNumber The quote number.
     * @param model The quote.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuote(quoteNumber: number, model: TsiWebUpdateQuoteModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteResponse>;
    public quotesUpdateQuote(quoteNumber: number, model: TsiWebUpdateQuoteModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteResponse>>;
    public quotesUpdateQuote(quoteNumber: number, model: TsiWebUpdateQuoteModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteResponse>>;
    public quotesUpdateQuote(quoteNumber: number, model: TsiWebUpdateQuoteModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuote.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesUpdateQuote.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the quote detail comment.
     * 
     * @param quoteNumber The quote number.
     * @param quoteDetailNumber The quote detail number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteDetailComment(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailCommentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesUpdateQuoteDetailComment(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailCommentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailComment(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailCommentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailComment(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailCommentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteDetailComment.');
        }
        if (quoteDetailNumber === null || quoteDetailNumber === undefined) {
            throw new Error('Required parameter quoteDetailNumber was null or undefined when calling quotesUpdateQuoteDetailComment.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesUpdateQuoteDetailComment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/comments/${encodeURIComponent(String(quoteDetailNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the quote detail install location.
     * 
     * @param quoteNumber The quote number.
     * @param quoteDetailNumber The quote detail number.
     * @param installLocation The install location.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteDetailInstallLocation(quoteNumber: number, quoteDetailNumber: number, installLocation: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesUpdateQuoteDetailInstallLocation(quoteNumber: number, quoteDetailNumber: number, installLocation: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailInstallLocation(quoteNumber: number, quoteDetailNumber: number, installLocation: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailInstallLocation(quoteNumber: number, quoteDetailNumber: number, installLocation: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteDetailInstallLocation.');
        }
        if (quoteDetailNumber === null || quoteDetailNumber === undefined) {
            throw new Error('Required parameter quoteDetailNumber was null or undefined when calling quotesUpdateQuoteDetailInstallLocation.');
        }
        if (installLocation === null || installLocation === undefined) {
            throw new Error('Required parameter installLocation was null or undefined when calling quotesUpdateQuoteDetailInstallLocation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/installlocation/${encodeURIComponent(String(quoteDetailNumber))}`,
            installLocation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates quote stock and non stock detail items.
     * 
     * @param quoteNumber The quote number.
     * @param quoteDetailNumber The quote stock or non stock detail number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteDetailItem(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailItemModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesUpdateQuoteDetailItem(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailItemModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailItem(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailItemModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailItem(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailItemModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteDetailItem.');
        }
        if (quoteDetailNumber === null || quoteDetailNumber === undefined) {
            throw new Error('Required parameter quoteDetailNumber was null or undefined when calling quotesUpdateQuoteDetailItem.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesUpdateQuoteDetailItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/items/${encodeURIComponent(String(quoteDetailNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the quote detail subtotal.
     * 
     * @param quoteNumber The quote number.
     * @param quoteDetailNumber The quote detail number.
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteDetailSubtotal(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailSubtotalModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteDetailResponse>;
    public quotesUpdateQuoteDetailSubtotal(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailSubtotalModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailSubtotal(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailSubtotalModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteDetailResponse>>;
    public quotesUpdateQuoteDetailSubtotal(quoteNumber: number, quoteDetailNumber: number, model: TsiWebQuoteDetailSubtotalModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteDetailSubtotal.');
        }
        if (quoteDetailNumber === null || quoteDetailNumber === undefined) {
            throw new Error('Required parameter quoteDetailNumber was null or undefined when calling quotesUpdateQuoteDetailSubtotal.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling quotesUpdateQuoteDetailSubtotal.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteDetailResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/details/subtotals/${encodeURIComponent(String(quoteDetailNumber))}`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the quote document properties.
     * 
     * @param quoteNumber The quote number.
     * @param documentID The document identifier.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteDocumentProperties(quoteNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public quotesUpdateQuoteDocumentProperties(quoteNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public quotesUpdateQuoteDocumentProperties(quoteNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public quotesUpdateQuoteDocumentProperties(quoteNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteDocumentProperties.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling quotesUpdateQuoteDocumentProperties.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling quotesUpdateQuoteDocumentProperties.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing quote note.
     * 
     * @param quoteNumber The quote number.
     * @param quoteNoteNumber The quote note number.
     * @param note The note.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quotesUpdateQuoteNote(quoteNumber: number, quoteNoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebQuoteNoteResponse>;
    public quotesUpdateQuoteNote(quoteNumber: number, quoteNoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebQuoteNoteResponse>>;
    public quotesUpdateQuoteNote(quoteNumber: number, quoteNoteNumber: number, note: TsiWebQuoteNoteModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebQuoteNoteResponse>>;
    public quotesUpdateQuoteNote(quoteNumber: number, quoteNoteNumber: number, note: TsiWebQuoteNoteModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (quoteNumber === null || quoteNumber === undefined) {
            throw new Error('Required parameter quoteNumber was null or undefined when calling quotesUpdateQuoteNote.');
        }
        if (quoteNoteNumber === null || quoteNoteNumber === undefined) {
            throw new Error('Required parameter quoteNoteNumber was null or undefined when calling quotesUpdateQuoteNote.');
        }
        if (note === null || note === undefined) {
            throw new Error('Required parameter note was null or undefined when calling quotesUpdateQuoteNote.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebQuoteNoteResponse>(`${this.basePath}/api/quotes/${encodeURIComponent(String(quoteNumber))}/notes/${encodeURIComponent(String(quoteNoteNumber))}`,
            note,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
