/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAccount } from '../model/tsiWebAccount';
import { TsiWebAccountCustomerAssetResponse } from '../model/tsiWebAccountCustomerAssetResponse';
import { TsiWebAccountDetail } from '../model/tsiWebAccountDetail';
import { TsiWebAccountExternalProduct } from '../model/tsiWebAccountExternalProduct';
import { TsiWebAccountExternalProductResponse } from '../model/tsiWebAccountExternalProductResponse';
import { TsiWebAccountJournalEntryModel } from '../model/tsiWebAccountJournalEntryModel';
import { TsiWebAccountManagedAssetResponse } from '../model/tsiWebAccountManagedAssetResponse';
import { TsiWebAccountMarketingDetail } from '../model/tsiWebAccountMarketingDetail';
import { TsiWebAccountMarketingDetails } from '../model/tsiWebAccountMarketingDetails';
import { TsiWebAccountMarketingDetailsResponse } from '../model/tsiWebAccountMarketingDetailsResponse';
import { TsiWebAccountResponse } from '../model/tsiWebAccountResponse';
import { TsiWebAccountServiceDetail } from '../model/tsiWebAccountServiceDetail';
import { TsiWebAccountServiceDetails } from '../model/tsiWebAccountServiceDetails';
import { TsiWebAccountServiceDetailsResponse } from '../model/tsiWebAccountServiceDetailsResponse';
import { TsiWebAccountSummary } from '../model/tsiWebAccountSummary';
import { TsiWebAccountSystem } from '../model/tsiWebAccountSystem';
import { TsiWebAccountSystemResponse } from '../model/tsiWebAccountSystemResponse';
import { TsiWebAccounting } from '../model/tsiWebAccounting';
import { TsiWebAccountingDetail } from '../model/tsiWebAccountingDetail';
import { TsiWebAccountingDetailResponse } from '../model/tsiWebAccountingDetailResponse';
import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAreasWebApiUpdateDocumentModel } from '../model/tsiWebAreasWebApiUpdateDocumentModel';
import { TsiWebAssignSystemModel } from '../model/tsiWebAssignSystemModel';
import { TsiWebAssignedMarketingGroup } from '../model/tsiWebAssignedMarketingGroup';
import { TsiWebAssignedMarketingGroupsResponse } from '../model/tsiWebAssignedMarketingGroupsResponse';
import { TsiWebAssignedMarketingProfile } from '../model/tsiWebAssignedMarketingProfile';
import { TsiWebAssignedMarketingProfilesResponse } from '../model/tsiWebAssignedMarketingProfilesResponse';
import { TsiWebAssignedSICCode } from '../model/tsiWebAssignedSICCode';
import { TsiWebAssignedSICCodesResponse } from '../model/tsiWebAssignedSICCodesResponse';
import { TsiWebBillTo } from '../model/tsiWebBillTo';
import { TsiWebBillToResponse } from '../model/tsiWebBillToResponse';
import { TsiWebCoManagedTechnician } from '../model/tsiWebCoManagedTechnician';
import { TsiWebCoManagedTechnicianResponse } from '../model/tsiWebCoManagedTechnicianResponse';
import { TsiWebCreateAccountModel } from '../model/tsiWebCreateAccountModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebDocumentResponse } from '../model/tsiWebDocumentResponse';
import { TsiWebDocumentSummary } from '../model/tsiWebDocumentSummary';
import { TsiWebDocumentsResponse } from '../model/tsiWebDocumentsResponse';
import { TsiWebJournalEntriesResponse } from '../model/tsiWebJournalEntriesResponse';
import { TsiWebJournalEntryResponse } from '../model/tsiWebJournalEntryResponse';
import { TsiWebPayMethod } from '../model/tsiWebPayMethod';
import { TsiWebPhoneNumber } from '../model/tsiWebPhoneNumber';
import { TsiWebPhoneNumberResponse } from '../model/tsiWebPhoneNumberResponse';
import { TsiWebResponse } from '../model/tsiWebResponse';
import { TsiWebSearchAccountResponse } from '../model/tsiWebSearchAccountResponse';
import { TsiWebShipTo } from '../model/tsiWebShipTo';
import { TsiWebShipToResponse } from '../model/tsiWebShipToResponse';
import { TsiWebTasksResponse } from '../model/tsiWebTasksResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountsService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for accounts.
     * Valid SearchType &#x3D; AccountName, Address, PostalCode, Email, PhoneNumber, AccountNumber, AccountId, AccountNameSoundsLike, ExternalId, Agreement, CustomField (requires CategoryName and CustomFieldName), ContactName, ExternalProduct, AccountType, AccountStatus  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling accountsAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new account.
     * 
     * @param model The model.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateAccount(model: TsiWebCreateAccountModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountResponse>;
    public accountsCreateAccount(model: TsiWebCreateAccountModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountResponse>>;
    public accountsCreateAccount(model: TsiWebCreateAccountModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountResponse>>;
    public accountsCreateAccount(model: TsiWebCreateAccountModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountsCreateAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAccountResponse>(`${this.basePath}/api/accounts`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the account document.
     * Requires a multipart/form request containing the physical file and the xml / json Document
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateAccountDocument(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public accountsCreateAccountDocument(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public accountsCreateAccountDocument(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public accountsCreateAccountDocument(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreateAccountDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebDocumentResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates account external product.
     * 
     * @param accountNumber The account number.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateAccountExternalProduct(accountNumber: number, request: TsiWebAccountExternalProduct, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountExternalProductResponse>;
    public accountsCreateAccountExternalProduct(accountNumber: number, request: TsiWebAccountExternalProduct, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountExternalProductResponse>>;
    public accountsCreateAccountExternalProduct(accountNumber: number, request: TsiWebAccountExternalProduct, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountExternalProductResponse>>;
    public accountsCreateAccountExternalProduct(accountNumber: number, request: TsiWebAccountExternalProduct, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreateAccountExternalProduct.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling accountsCreateAccountExternalProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAccountExternalProductResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/externalproducts`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the account journal entry.
     * Creates journal entries that will not be flagged as system genertated only.
     * @param accountNumber The account number.
     * @param model The journal entry.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateAccountJournalEntry(accountNumber: number, model: TsiWebAccountJournalEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntryResponse>;
    public accountsCreateAccountJournalEntry(accountNumber: number, model: TsiWebAccountJournalEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntryResponse>>;
    public accountsCreateAccountJournalEntry(accountNumber: number, model: TsiWebAccountJournalEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntryResponse>>;
    public accountsCreateAccountJournalEntry(accountNumber: number, model: TsiWebAccountJournalEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreateAccountJournalEntry.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountsCreateAccountJournalEntry.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebJournalEntryResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/journalentries`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the bill to.
     * 
     * @param accountNumber The account number.
     * @param billTo The bill to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateBillTo(accountNumber: number, billTo: TsiWebBillTo, observe?: 'body', reportProgress?: boolean): Observable<TsiWebBillToResponse>;
    public accountsCreateBillTo(accountNumber: number, billTo: TsiWebBillTo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebBillToResponse>>;
    public accountsCreateBillTo(accountNumber: number, billTo: TsiWebBillTo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebBillToResponse>>;
    public accountsCreateBillTo(accountNumber: number, billTo: TsiWebBillTo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreateBillTo.');
        }
        if (billTo === null || billTo === undefined) {
            throw new Error('Required parameter billTo was null or undefined when calling accountsCreateBillTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebBillToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos`,
            billTo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an account phone number.
     * 
     * @param accountNumber The account number.
     * @param phoneNumber The phone number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreatePhoneNumber(accountNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public accountsCreatePhoneNumber(accountNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public accountsCreatePhoneNumber(accountNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public accountsCreatePhoneNumber(accountNumber: number, phoneNumber: TsiWebPhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreatePhoneNumber.');
        }
        if (phoneNumber === null || phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling accountsCreatePhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebPhoneNumberResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers`,
            phoneNumber,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new alternate ship to or updates an existing ship to for the account.
     * 
     * @param accountNumber The account number.
     * @param shipTo The ship to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsCreateShipTo(accountNumber: number, shipTo: TsiWebShipTo, observe?: 'body', reportProgress?: boolean): Observable<TsiWebShipToResponse>;
    public accountsCreateShipTo(accountNumber: number, shipTo: TsiWebShipTo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebShipToResponse>>;
    public accountsCreateShipTo(accountNumber: number, shipTo: TsiWebShipTo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebShipToResponse>>;
    public accountsCreateShipTo(accountNumber: number, shipTo: TsiWebShipTo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsCreateShipTo.');
        }
        if (shipTo === null || shipTo === undefined) {
            throw new Error('Required parameter shipTo was null or undefined when calling accountsCreateShipTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebShipToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos`,
            shipTo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the external product from the account.
     * 
     * @param accountNumber The account number.
     * @param id The account external product identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteAccountExternalProduct(accountNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteAccountExternalProduct(accountNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteAccountExternalProduct(accountNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteAccountExternalProduct(accountNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteAccountExternalProduct.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteAccountExternalProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/externalproducts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a group from the account.
     * The group must be url encoded
     * @param accountNumber The account number.
     * @param id The group name to remove.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteAccountGroup(accountNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteAccountGroup(accountNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteAccountGroup(accountNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteAccountGroup(accountNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteAccountGroup.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteAccountGroup.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a profile from the account.
     * The group must be url encoded
     * @param accountNumber The account number.
     * @param id The profile name to remove.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteAccountProfile(accountNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteAccountProfile(accountNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteAccountProfile(accountNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteAccountProfile(accountNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteAccountProfile.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteAccountProfile.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/profiles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a SIC code from the account.
     * 
     * @param accountNumber The account number.
     * @param id The SIC code.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteAccountSICCodes(accountNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteAccountSICCodes(accountNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteAccountSICCodes(accountNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteAccountSICCodes(accountNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteAccountSICCodes.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteAccountSICCodes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/siccodes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the system from the account.
     * 
     * @param accountNumber The account number.
     * @param id The system to remove.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteAccountSystem(accountNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteAccountSystem(accountNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteAccountSystem(accountNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteAccountSystem(accountNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteAccountSystem.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteAccountSystem.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/systems`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the alternate bill to from the account.
     * 
     * @param accountNumber The account number.
     * @param id The bill to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteBillTo(accountNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteBillTo(accountNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteBillTo(accountNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteBillTo(accountNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteBillTo.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteBillTo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the account phone number.
     * 
     * @param accountNumber The account number.
     * @param id The phone number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeletePhoneNumber(accountNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeletePhoneNumber(accountNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeletePhoneNumber(accountNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeletePhoneNumber(accountNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeletePhoneNumber.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeletePhoneNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the alternate ship to from the account.
     * 
     * @param accountNumber The account number.
     * @param id The ship to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteShipTo(accountNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteShipTo(accountNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteShipTo(accountNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteShipTo(accountNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsDeleteShipTo.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteShipTo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the tech from the account group.
     * 
     * @param repnumber The repnumber.
     * @param id The group name.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsDeleteTechFromAccountGroup(repnumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsDeleteTechFromAccountGroup(repnumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsDeleteTechFromAccountGroup(repnumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsDeleteTechFromAccountGroup(repnumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (repnumber === null || repnumber === undefined) {
            throw new Error('Required parameter repnumber was null or undefined when calling accountsDeleteTechFromAccountGroup.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accountsDeleteTechFromAccountGroup.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/accounts/service/comanagedtechs/${encodeURIComponent(String(repnumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of Co-Managed Direct techs assigned to the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountCoManagedTechs(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCoManagedTechnician>>;
    public accountsGetAccountCoManagedTechs(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCoManagedTechnician>>>;
    public accountsGetAccountCoManagedTechs(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCoManagedTechnician>>>;
    public accountsGetAccountCoManagedTechs(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountCoManagedTechs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCoManagedTechnician>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/comanagedtechs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets account completed tasks
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountCompletedTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks/completed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account customer assets.
     * 
     * @param accountNumber The account number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountCustomerAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountCustomerAssetResponse>;
    public accountsGetAccountCustomerAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountCustomerAssetResponse>>;
    public accountsGetAccountCustomerAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountCustomerAssetResponse>>;
    public accountsGetAccountCustomerAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountCustomerAssets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountCustomerAssetResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/assets/customer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account details by account number.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountDetails(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountDetail>;
    public accountsGetAccountDetails(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountDetail>>;
    public accountsGetAccountDetails(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountDetail>>;
    public accountsGetAccountDetails(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountDetail>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account document with the file bytes.
     * 
     * @param accountNumber The account number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountDocument(accountNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentSummary>;
    public accountsGetAccountDocument(accountNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentSummary>>;
    public accountsGetAccountDocument(accountNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentSummary>>;
    public accountsGetAccountDocument(accountNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountDocument.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling accountsGetAccountDocument.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentSummary>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account documents.
     * 
     * @param accountNumber The account number.
     * @param accountOnly If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountDocuments(accountNumber: number, accountOnly?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentsResponse>;
    public accountsGetAccountDocuments(accountNumber: number, accountOnly?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentsResponse>>;
    public accountsGetAccountDocuments(accountNumber: number, accountOnly?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentsResponse>>;
    public accountsGetAccountDocuments(accountNumber: number, accountOnly?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountDocuments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accountOnly !== undefined) {
            queryParameters = queryParameters.set('accountOnly', <any>accountOnly);
        }
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account documents.
     * 
     * @param accountNumber The account number.
     * @param accountOnly If false includes documents from all documents related to the account. For example Contacts, Opportunities and Service Orders.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountDocuments_1(accountNumber: number, accountOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentsResponse>;
    public accountsGetAccountDocuments_1(accountNumber: number, accountOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentsResponse>>;
    public accountsGetAccountDocuments_1(accountNumber: number, accountOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentsResponse>>;
    public accountsGetAccountDocuments_1(accountNumber: number, accountOnly: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountDocuments_1.');
        }
        if (accountOnly === null || accountOnly === undefined) {
            throw new Error('Required parameter accountOnly was null or undefined when calling accountsGetAccountDocuments_1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(accountOnly))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets account external product by ID.
     * 
     * @param accountNumber The account number.
     * @param accountExternalProductID The account external product identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountExternalProduct(accountNumber: number, accountExternalProductID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountExternalProduct>;
    public accountsGetAccountExternalProduct(accountNumber: number, accountExternalProductID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountExternalProduct>>;
    public accountsGetAccountExternalProduct(accountNumber: number, accountExternalProductID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountExternalProduct>>;
    public accountsGetAccountExternalProduct(accountNumber: number, accountExternalProductID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountExternalProduct.');
        }
        if (accountExternalProductID === null || accountExternalProductID === undefined) {
            throw new Error('Required parameter accountExternalProductID was null or undefined when calling accountsGetAccountExternalProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountExternalProduct>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/externalproducts/${encodeURIComponent(String(accountExternalProductID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of associated external products for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountExternalProducts(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountExternalProduct>>;
    public accountsGetAccountExternalProducts(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountExternalProduct>>>;
    public accountsGetAccountExternalProducts(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountExternalProduct>>>;
    public accountsGetAccountExternalProducts(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountExternalProducts.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountExternalProduct>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/externalproducts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets account incomplete tasks
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountIncompleteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account journal entries.
     * 
     * @param accountNumber The account number.
     * @param excludeSystemEntries If false includes system entries.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountJournalEntries(accountNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntriesResponse>;
    public accountsGetAccountJournalEntries(accountNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntriesResponse>>;
    public accountsGetAccountJournalEntries(accountNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntriesResponse>>;
    public accountsGetAccountJournalEntries(accountNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountJournalEntries.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebJournalEntriesResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/journalentries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account journal entries.
     * 
     * @param accountNumber The account number.
     * @param excludeSystemEntries If false includes system entries.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountJournalEntries_2(accountNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntriesResponse>;
    public accountsGetAccountJournalEntries_2(accountNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntriesResponse>>;
    public accountsGetAccountJournalEntries_2(accountNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntriesResponse>>;
    public accountsGetAccountJournalEntries_2(accountNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountJournalEntries_2.');
        }
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling accountsGetAccountJournalEntries_2.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebJournalEntriesResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/journalentries/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account managed assets.
     * 
     * @param accountNumber The account number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountManagedAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountManagedAssetResponse>;
    public accountsGetAccountManagedAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountManagedAssetResponse>>;
    public accountsGetAccountManagedAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountManagedAssetResponse>>;
    public accountsGetAccountManagedAssets(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountManagedAssets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountManagedAssetResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/assets/managed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account only completed tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber The account number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountOnlyCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountOnlyCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyCompletedTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountOnlyCompletedTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks/accountonly/completed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account only incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber The account number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountOnlyIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountOnlyIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyIncompleteTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountOnlyIncompleteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks/accountonly`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account only tasks. Includes both completed and imcomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber The account number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountOnlyTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountOnlyTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountOnlyTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountOnlyTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks/accountonly/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account summary by account number.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountSummary(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountSummary>;
    public accountsGetAccountSummary(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountSummary>>;
    public accountsGetAccountSummary(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountSummary>>;
    public accountsGetAccountSummary(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountSummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountSummary>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of systems assigned to the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountSystems(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAccountSystem>>;
    public accountsGetAccountSystems(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAccountSystem>>>;
    public accountsGetAccountSystems(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAccountSystem>>>;
    public accountsGetAccountSystems(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountSystems.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAccountSystem>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/systems`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets account tasks. includes both completed and incomplete tasks
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param accountNumber 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public accountsGetAccountTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public accountsGetAccountTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public accountsGetAccountTasks(accountNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/tasks/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the accounting details for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAccountingDetails(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccounting>;
    public accountsGetAccountingDetails(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccounting>>;
    public accountsGetAccountingDetails(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccounting>>;
    public accountsGetAccountingDetails(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAccountingDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccounting>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of groups assigned to the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAssignedGroups(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssignedMarketingGroup>>;
    public accountsGetAssignedGroups(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssignedMarketingGroup>>>;
    public accountsGetAssignedGroups(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssignedMarketingGroup>>>;
    public accountsGetAssignedGroups(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAssignedGroups.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssignedMarketingGroup>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of profiles assigned to the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAssignedProfiles(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssignedMarketingProfile>>;
    public accountsGetAssignedProfiles(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssignedMarketingProfile>>>;
    public accountsGetAssignedProfiles(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssignedMarketingProfile>>>;
    public accountsGetAssignedProfiles(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAssignedProfiles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssignedMarketingProfile>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/profiles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of SIC codes assigned to the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetAssignedSICCodes(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssignedSICCode>>;
    public accountsGetAssignedSICCodes(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssignedSICCode>>>;
    public accountsGetAssignedSICCodes(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssignedSICCode>>>;
    public accountsGetAssignedSICCodes(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetAssignedSICCodes.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssignedSICCode>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/siccodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the alternate bill to for the account by ID.
     * 
     * @param accountNumber The account number.
     * @param billToID The bill to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetBillTo(accountNumber: number, billToID: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebBillTo>>;
    public accountsGetBillTo(accountNumber: number, billToID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebBillTo>>>;
    public accountsGetBillTo(accountNumber: number, billToID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebBillTo>>>;
    public accountsGetBillTo(accountNumber: number, billToID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetBillTo.');
        }
        if (billToID === null || billToID === undefined) {
            throw new Error('Required parameter billToID was null or undefined when calling accountsGetBillTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebBillTo>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos/${encodeURIComponent(String(billToID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of alternate bill tos for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetBillTos(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebBillTo>>;
    public accountsGetBillTos(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebBillTo>>>;
    public accountsGetBillTos(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebBillTo>>>;
    public accountsGetBillTos(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetBillTos.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebBillTo>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetCustomFields(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public accountsGetCustomFields(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public accountsGetCustomFields(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public accountsGetCustomFields(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/customfields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account document file.
     * 
     * @param accountNumber The account number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetFile(accountNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public accountsGetFile(accountNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public accountsGetFile(accountNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public accountsGetFile(accountNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling accountsGetFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(documentID))}/file`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account marketing details.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetMarketingDetails(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountMarketingDetails>;
    public accountsGetMarketingDetails(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountMarketingDetails>>;
    public accountsGetMarketingDetails(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountMarketingDetails>>;
    public accountsGetMarketingDetails(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetMarketingDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountMarketingDetails>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the pay method for the account by ID.
     * 
     * @param accountNumber The account number.
     * @param payMethodID The pay method identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetPayMethod(accountNumber: number, payMethodID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPayMethod>;
    public accountsGetPayMethod(accountNumber: number, payMethodID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPayMethod>>;
    public accountsGetPayMethod(accountNumber: number, payMethodID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPayMethod>>;
    public accountsGetPayMethod(accountNumber: number, payMethodID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetPayMethod.');
        }
        if (payMethodID === null || payMethodID === undefined) {
            throw new Error('Required parameter payMethodID was null or undefined when calling accountsGetPayMethod.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPayMethod>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/paymethods/${encodeURIComponent(String(payMethodID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of pay methods for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetPayMethods(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPayMethod>>;
    public accountsGetPayMethods(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPayMethod>>>;
    public accountsGetPayMethods(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPayMethod>>>;
    public accountsGetPayMethods(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetPayMethods.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPayMethod>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/paymethods`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account phone number.
     * 
     * @param accountNumber The account number.
     * @param phoneNumberID The phone number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumber>;
    public accountsGetPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumber>>;
    public accountsGetPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumber>>;
    public accountsGetPhoneNumber(accountNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetPhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling accountsGetPhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPhoneNumber>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account phone numbers.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetPhoneNumbers(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPhoneNumber>>;
    public accountsGetPhoneNumbers(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPhoneNumber>>>;
    public accountsGetPhoneNumbers(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPhoneNumber>>>;
    public accountsGetPhoneNumbers(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetPhoneNumbers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPhoneNumber>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the service details for an account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetServiceDetails(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountServiceDetails>;
    public accountsGetServiceDetails(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountServiceDetails>>;
    public accountsGetServiceDetails(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountServiceDetails>>;
    public accountsGetServiceDetails(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetServiceDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebAccountServiceDetails>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the alternate ship to for the account by ID.
     * 
     * @param accountNumber The account number.
     * @param shipToID The ship to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetShipTo(accountNumber: number, shipToID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebShipTo>;
    public accountsGetShipTo(accountNumber: number, shipToID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebShipTo>>;
    public accountsGetShipTo(accountNumber: number, shipToID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebShipTo>>;
    public accountsGetShipTo(accountNumber: number, shipToID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetShipTo.');
        }
        if (shipToID === null || shipToID === undefined) {
            throw new Error('Required parameter shipToID was null or undefined when calling accountsGetShipTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebShipTo>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos/${encodeURIComponent(String(shipToID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of alternate ship tos for the account.
     * 
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsGetShipTos(accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebShipTo>>;
    public accountsGetShipTos(accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebShipTo>>>;
    public accountsGetShipTos(accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebShipTo>>>;
    public accountsGetShipTos(accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsGetShipTos.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebShipTo>>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates or updates accounting details for the account.
     * 
     * @param accountNumber The account number.
     * @param details The details.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSaveAccountingDetails(accountNumber: number, details: TsiWebAccountingDetail, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountingDetailResponse>;
    public accountsSaveAccountingDetails(accountNumber: number, details: TsiWebAccountingDetail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountingDetailResponse>>;
    public accountsSaveAccountingDetails(accountNumber: number, details: TsiWebAccountingDetail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountingDetailResponse>>;
    public accountsSaveAccountingDetails(accountNumber: number, details: TsiWebAccountingDetail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSaveAccountingDetails.');
        }
        if (details === null || details === undefined) {
            throw new Error('Required parameter details was null or undefined when calling accountsSaveAccountingDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountingDetailResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting`,
            details,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the account marketing details.
     * 
     * @param accountNumber The account number.
     * @param details Marketing details for the account.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSaveMarketingDetails(accountNumber: number, details: TsiWebAccountMarketingDetail, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountMarketingDetailsResponse>;
    public accountsSaveMarketingDetails(accountNumber: number, details: TsiWebAccountMarketingDetail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountMarketingDetailsResponse>>;
    public accountsSaveMarketingDetails(accountNumber: number, details: TsiWebAccountMarketingDetail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountMarketingDetailsResponse>>;
    public accountsSaveMarketingDetails(accountNumber: number, details: TsiWebAccountMarketingDetail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSaveMarketingDetails.');
        }
        if (details === null || details === undefined) {
            throw new Error('Required parameter details was null or undefined when calling accountsSaveMarketingDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountMarketingDetailsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing`,
            details,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the account service details.
     * 
     * @param accountNumber The account number.
     * @param details The details.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSaveServiceDetails(accountNumber: number, details: TsiWebAccountServiceDetail, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountServiceDetailsResponse>;
    public accountsSaveServiceDetails(accountNumber: number, details: TsiWebAccountServiceDetail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountServiceDetailsResponse>>;
    public accountsSaveServiceDetails(accountNumber: number, details: TsiWebAccountServiceDetail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountServiceDetailsResponse>>;
    public accountsSaveServiceDetails(accountNumber: number, details: TsiWebAccountServiceDetail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSaveServiceDetails.');
        }
        if (details === null || details === undefined) {
            throw new Error('Required parameter details was null or undefined when calling accountsSaveServiceDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountServiceDetailsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service`,
            details,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Accounts using contact name.
     * 
     * @param criteria The criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchAccountsContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchAccountsContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsContactName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchAccountsContactName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/contact/name`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Accounts using a custom category and field label.
     * 
     * @param model A {Tsi.Web.CustomFieldSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchAccountsCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchAccountsCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsCustomField(model: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling accountsSearchAccountsCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/customfield`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches the name of the accounts that sound like the criteria provided.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchAccountsSoundsLikeName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchAccountsSoundsLikeName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsSoundsLikeName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchAccountsSoundsLikeName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchAccountsSoundsLikeName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/name/soundslike`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by the user specified identifier.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAccountId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAccountId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAccountId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/accountid`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by number.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAccountNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/accountnumber`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by Account Status.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAccountStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAccountStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountStatus(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAccountStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/accountstatus`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by Account Type.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAccountType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAccountType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAccountType(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAccountType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/accounttype`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by address.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAddress(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAddress(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAddress(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAddress(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAddress.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/address`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by MSP Agreement .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByAgreement(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByAgreement(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByAgreement(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByAgreement(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByAgreement.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/agreement`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts using all email addresses associated to the account and its contacts.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByEmail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/email`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts using the External ID related to .
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByExternalId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByExternalId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByExternalId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByExternalId(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByExternalId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/externalid`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by name.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/name`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts using all phone numbers associated to the account and its contacts.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByPhone(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByPhone(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByPhone(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByPhone(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByPhone.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/phone`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search accounts by postal code.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSearchByPostalCode(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchAccountResponse>;
    public accountsSearchByPostalCode(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchAccountResponse>>;
    public accountsSearchByPostalCode(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchAccountResponse>>;
    public accountsSearchByPostalCode(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling accountsSearchByPostalCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchAccountResponse>(`${this.basePath}/api/accounts/search/postalcode`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Overwrites the account document physical file, does not rename the file.
     * Requires a multipart/form request containing the physical file.
     * @param accountNumber The account number.
     * @param documentID The document identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountDocumentFile(accountNumber: number, documentID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public accountsSetAccountDocumentFile(accountNumber: number, documentID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public accountsSetAccountDocumentFile(accountNumber: number, documentID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public accountsSetAccountDocumentFile(accountNumber: number, documentID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountDocumentFile.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling accountsSetAccountDocumentFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(documentID))}/overwrite`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the documents file name and renames the associated file.
     * 
     * @param accountNumber 
     * @param documentID 
     * @param fileName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountDocumentFileName(accountNumber: number, documentID: number, fileName: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public accountsSetAccountDocumentFileName(accountNumber: number, documentID: number, fileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public accountsSetAccountDocumentFileName(accountNumber: number, documentID: number, fileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public accountsSetAccountDocumentFileName(accountNumber: number, documentID: number, fileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountDocumentFileName.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling accountsSetAccountDocumentFileName.');
        }
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling accountsSetAccountDocumentFileName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(documentID))}/rename`,
            fileName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a group to an account.
     * 
     * @param accountNumber The account number.
     * @param group The group to assign.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountGroup(accountNumber: number, group: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAssignedMarketingGroupsResponse>;
    public accountsSetAccountGroup(accountNumber: number, group: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAssignedMarketingGroupsResponse>>;
    public accountsSetAccountGroup(accountNumber: number, group: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAssignedMarketingGroupsResponse>>;
    public accountsSetAccountGroup(accountNumber: number, group: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountGroup.');
        }
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling accountsSetAccountGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAssignedMarketingGroupsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/groups`,
            group,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a profile to an account.
     * 
     * @param accountNumber The account number.
     * @param profile The profile to assign.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountProfile(accountNumber: number, profile: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAssignedMarketingProfilesResponse>;
    public accountsSetAccountProfile(accountNumber: number, profile: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAssignedMarketingProfilesResponse>>;
    public accountsSetAccountProfile(accountNumber: number, profile: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAssignedMarketingProfilesResponse>>;
    public accountsSetAccountProfile(accountNumber: number, profile: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountProfile.');
        }
        if (profile === null || profile === undefined) {
            throw new Error('Required parameter profile was null or undefined when calling accountsSetAccountProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAssignedMarketingProfilesResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/profiles`,
            profile,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a SIC code to an account.
     * 
     * @param accountNumber The account number.
     * @param code The SIC code.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountSICCode(accountNumber: number, code: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAssignedSICCodesResponse>;
    public accountsSetAccountSICCode(accountNumber: number, code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAssignedSICCodesResponse>>;
    public accountsSetAccountSICCode(accountNumber: number, code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAssignedSICCodesResponse>>;
    public accountsSetAccountSICCode(accountNumber: number, code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountSICCode.');
        }
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling accountsSetAccountSICCode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAssignedSICCodesResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/marketing/siccodes`,
            code,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a system to the account.
     * 
     * @param accountNumber The account number.
     * @param system The system.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetAccountSystem(accountNumber: number, system: TsiWebAssignSystemModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountSystemResponse>;
    public accountsSetAccountSystem(accountNumber: number, system: TsiWebAssignSystemModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountSystemResponse>>;
    public accountsSetAccountSystem(accountNumber: number, system: TsiWebAssignSystemModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountSystemResponse>>;
    public accountsSetAccountSystem(accountNumber: number, system: TsiWebAssignSystemModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetAccountSystem.');
        }
        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling accountsSetAccountSystem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAccountSystemResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/systems`,
            system,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the default system for the account.
     * 
     * @param accountNumber The account number.
     * @param system The system to make default.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetDefaultSystem(accountNumber: number, system: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountSystemResponse>;
    public accountsSetDefaultSystem(accountNumber: number, system: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountSystemResponse>>;
    public accountsSetDefaultSystem(accountNumber: number, system: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountSystemResponse>>;
    public accountsSetDefaultSystem(accountNumber: number, system: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetDefaultSystem.');
        }
        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling accountsSetDefaultSystem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountSystemResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/systems/default`,
            system,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary alternate bill to for the account.
     * 
     * @param accountNumber The account number.
     * @param billToID The bill to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetPrimaryBillTo(accountNumber: number, billToID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebBillToResponse>;
    public accountsSetPrimaryBillTo(accountNumber: number, billToID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebBillToResponse>>;
    public accountsSetPrimaryBillTo(accountNumber: number, billToID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebBillToResponse>>;
    public accountsSetPrimaryBillTo(accountNumber: number, billToID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetPrimaryBillTo.');
        }
        if (billToID === null || billToID === undefined) {
            throw new Error('Required parameter billToID was null or undefined when calling accountsSetPrimaryBillTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebBillToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos/${encodeURIComponent(String(billToID))}/primary`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary account fax number.
     * 
     * @param accountNumber The account number.
     * @param phoneNumberID The fax number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetPrimaryFaxNumber(accountNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public accountsSetPrimaryFaxNumber(accountNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public accountsSetPrimaryFaxNumber(accountNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public accountsSetPrimaryFaxNumber(accountNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetPrimaryFaxNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling accountsSetPrimaryFaxNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}/primaryfax`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary account phone number.
     * 
     * @param accountNumber The account number.
     * @param phoneNumberID The phone number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetPrimaryPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public accountsSetPrimaryPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public accountsSetPrimaryPhoneNumber(accountNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public accountsSetPrimaryPhoneNumber(accountNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetPrimaryPhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling accountsSetPrimaryPhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}/primaryphone`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary alternate ship to for the account.
     * 
     * @param accountNumber The account number.
     * @param shipToID The ship to identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetPrimaryShipTo(accountNumber: number, shipToID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebShipToResponse>;
    public accountsSetPrimaryShipTo(accountNumber: number, shipToID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebShipToResponse>>;
    public accountsSetPrimaryShipTo(accountNumber: number, shipToID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebShipToResponse>>;
    public accountsSetPrimaryShipTo(accountNumber: number, shipToID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsSetPrimaryShipTo.');
        }
        if (shipToID === null || shipToID === undefined) {
            throw new Error('Required parameter shipToID was null or undefined when calling accountsSetPrimaryShipTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebShipToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos/${encodeURIComponent(String(shipToID))}/primary`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds the co-manage direct tech to an account group.
     * 
     * @param repnumber The repnumber.
     * @param groupName The group name.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsSetTechAccountGroup(repnumber: number, groupName: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCoManagedTechnicianResponse>;
    public accountsSetTechAccountGroup(repnumber: number, groupName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCoManagedTechnicianResponse>>;
    public accountsSetTechAccountGroup(repnumber: number, groupName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCoManagedTechnicianResponse>>;
    public accountsSetTechAccountGroup(repnumber: number, groupName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (repnumber === null || repnumber === undefined) {
            throw new Error('Required parameter repnumber was null or undefined when calling accountsSetTechAccountGroup.');
        }
        if (groupName === null || groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling accountsSetTechAccountGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebCoManagedTechnicianResponse>(`${this.basePath}/api/accounts/service/comanagedtechs/${encodeURIComponent(String(repnumber))}`,
            groupName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an existing account.
     * 
     * @param accountNumber The account number.
     * @param account The account.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateAccount(accountNumber: number, account: TsiWebAccount, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountResponse>;
    public accountsUpdateAccount(accountNumber: number, account: TsiWebAccount, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountResponse>>;
    public accountsUpdateAccount(accountNumber: number, account: TsiWebAccount, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountResponse>>;
    public accountsUpdateAccount(accountNumber: number, account: TsiWebAccount, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateAccount.');
        }
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountsUpdateAccount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}`,
            account,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the account document information. Does not allow the file name property to be changed.
     * 
     * @param accountNumber The account number.
     * @param documentID The document identifier.
     * @param request The update document request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateAccountDocumentProperties(accountNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentResponse>;
    public accountsUpdateAccountDocumentProperties(accountNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentResponse>>;
    public accountsUpdateAccountDocumentProperties(accountNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentResponse>>;
    public accountsUpdateAccountDocumentProperties(accountNumber: number, documentID: number, request: TsiWebAreasWebApiUpdateDocumentModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateAccountDocumentProperties.');
        }
        if (documentID === null || documentID === undefined) {
            throw new Error('Required parameter documentID was null or undefined when calling accountsUpdateAccountDocumentProperties.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling accountsUpdateAccountDocumentProperties.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebDocumentResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/documents/${encodeURIComponent(String(documentID))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the account external product.
     * 
     * @param accountNumber The account number.
     * @param externalproductid The externalproductid.
     * @param request The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateAccountExternalProduct(accountNumber: number, externalproductid: number, request: TsiWebAccountExternalProduct, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAccountExternalProductResponse>;
    public accountsUpdateAccountExternalProduct(accountNumber: number, externalproductid: number, request: TsiWebAccountExternalProduct, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAccountExternalProductResponse>>;
    public accountsUpdateAccountExternalProduct(accountNumber: number, externalproductid: number, request: TsiWebAccountExternalProduct, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAccountExternalProductResponse>>;
    public accountsUpdateAccountExternalProduct(accountNumber: number, externalproductid: number, request: TsiWebAccountExternalProduct, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateAccountExternalProduct.');
        }
        if (externalproductid === null || externalproductid === undefined) {
            throw new Error('Required parameter externalproductid was null or undefined when calling accountsUpdateAccountExternalProduct.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling accountsUpdateAccountExternalProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebAccountExternalProductResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/service/externalproducts/${encodeURIComponent(String(externalproductid))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the bill to.
     * 
     * @param accountNumber The account number.
     * @param billToID The bill to identifier.
     * @param billTo The bill to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateBillTo(accountNumber: number, billToID: number, billTo: TsiWebBillTo, observe?: 'body', reportProgress?: boolean): Observable<TsiWebBillToResponse>;
    public accountsUpdateBillTo(accountNumber: number, billToID: number, billTo: TsiWebBillTo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebBillToResponse>>;
    public accountsUpdateBillTo(accountNumber: number, billToID: number, billTo: TsiWebBillTo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebBillToResponse>>;
    public accountsUpdateBillTo(accountNumber: number, billToID: number, billTo: TsiWebBillTo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateBillTo.');
        }
        if (billToID === null || billToID === undefined) {
            throw new Error('Required parameter billToID was null or undefined when calling accountsUpdateBillTo.');
        }
        if (billTo === null || billTo === undefined) {
            throw new Error('Required parameter billTo was null or undefined when calling accountsUpdateBillTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebBillToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/billtos/${encodeURIComponent(String(billToID))}`,
            billTo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates account custom fields.
     * 
     * @param accountNumber The account number.
     * @param customFields The custom fields.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateCustomFields(accountNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public accountsUpdateCustomFields(accountNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public accountsUpdateCustomFields(accountNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public accountsUpdateCustomFields(accountNumber: number, customFields: Array<TsiWebCustomField>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling accountsUpdateCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/customfields`,
            customFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change an account phone number.
     * 
     * @param accountNumber The account number.
     * @param phoneNumberID The phone number identifier.
     * @param phoneNumber The phone number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdatePhoneNumber(accountNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public accountsUpdatePhoneNumber(accountNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public accountsUpdatePhoneNumber(accountNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public accountsUpdatePhoneNumber(accountNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdatePhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling accountsUpdatePhoneNumber.');
        }
        if (phoneNumber === null || phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling accountsUpdatePhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}`,
            phoneNumber,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param accountNumber 
     * @param shipToID 
     * @param shipTo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsUpdateShipTo(accountNumber: number, shipToID: number, shipTo: TsiWebShipTo, observe?: 'body', reportProgress?: boolean): Observable<TsiWebShipToResponse>;
    public accountsUpdateShipTo(accountNumber: number, shipToID: number, shipTo: TsiWebShipTo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebShipToResponse>>;
    public accountsUpdateShipTo(accountNumber: number, shipToID: number, shipTo: TsiWebShipTo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebShipToResponse>>;
    public accountsUpdateShipTo(accountNumber: number, shipToID: number, shipTo: TsiWebShipTo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling accountsUpdateShipTo.');
        }
        if (shipToID === null || shipToID === undefined) {
            throw new Error('Required parameter shipToID was null or undefined when calling accountsUpdateShipTo.');
        }
        if (shipTo === null || shipTo === undefined) {
            throw new Error('Required parameter shipTo was null or undefined when calling accountsUpdateShipTo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebShipToResponse>(`${this.basePath}/api/accounts/${encodeURIComponent(String(accountNumber))}/accounting/shiptos/${encodeURIComponent(String(shipToID))}`,
            shipTo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
