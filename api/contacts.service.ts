/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebAssignedMarketingGroup } from '../model/tsiWebAssignedMarketingGroup';
import { TsiWebAssignedMarketingGroupsResponse } from '../model/tsiWebAssignedMarketingGroupsResponse';
import { TsiWebAssignedMarketingProfile } from '../model/tsiWebAssignedMarketingProfile';
import { TsiWebAssignedMarketingProfilesResponse } from '../model/tsiWebAssignedMarketingProfilesResponse';
import { TsiWebContact } from '../model/tsiWebContact';
import { TsiWebContactDetail } from '../model/tsiWebContactDetail';
import { TsiWebContactJournalEntryModel } from '../model/tsiWebContactJournalEntryModel';
import { TsiWebContactResponse } from '../model/tsiWebContactResponse';
import { TsiWebContactSummary } from '../model/tsiWebContactSummary';
import { TsiWebCreateContactModel } from '../model/tsiWebCreateContactModel';
import { TsiWebCustomField } from '../model/tsiWebCustomField';
import { TsiWebCustomFieldSearchModel } from '../model/tsiWebCustomFieldSearchModel';
import { TsiWebCustomFieldsResponse } from '../model/tsiWebCustomFieldsResponse';
import { TsiWebDocumentsResponse } from '../model/tsiWebDocumentsResponse';
import { TsiWebEmailAddress } from '../model/tsiWebEmailAddress';
import { TsiWebEmailAddressResponse } from '../model/tsiWebEmailAddressResponse';
import { TsiWebJournalEntriesResponse } from '../model/tsiWebJournalEntriesResponse';
import { TsiWebJournalEntryResponse } from '../model/tsiWebJournalEntryResponse';
import { TsiWebPhoneNumber } from '../model/tsiWebPhoneNumber';
import { TsiWebPhoneNumberResponse } from '../model/tsiWebPhoneNumberResponse';
import { TsiWebResponse } from '../model/tsiWebResponse';
import { TsiWebSearchContactResponse } from '../model/tsiWebSearchContactResponse';
import { TsiWebTasksResponse } from '../model/tsiWebTasksResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ContactsService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for contacts.
     * Valid SearchType &#x3D; Firstname, LastName, Email, PhoneNumber, FirstNameSoundsLike, LastNameSoundsLike, AccountId, CustomField (requires CategoryName and CustomFieldName)  &lt;p&gt;Valid MatchType &#x3D; StartsWith (default), EndsWith, Contains, GreaterThan, GreaterThanEqual, Equal, LessThan, LessThanEqual&lt;/p&gt;
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling contactsAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the contact.
     * 
     * @param model The request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsCreateContact(model: TsiWebCreateContactModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactResponse>;
    public contactsCreateContact(model: TsiWebCreateContactModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactResponse>>;
    public contactsCreateContact(model: TsiWebCreateContactModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactResponse>>;
    public contactsCreateContact(model: TsiWebCreateContactModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contactsCreateContact.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebContactResponse>(`${this.basePath}/api/contacts`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the contact journal entry.
     * Creates journal entries that will not be flagged as system genertated only.
     * @param contactNumber The contact number.
     * @param model The journal entry.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsCreateContactJournalEntry(contactNumber: number, model: TsiWebContactJournalEntryModel, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntryResponse>;
    public contactsCreateContactJournalEntry(contactNumber: number, model: TsiWebContactJournalEntryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntryResponse>>;
    public contactsCreateContactJournalEntry(contactNumber: number, model: TsiWebContactJournalEntryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntryResponse>>;
    public contactsCreateContactJournalEntry(contactNumber: number, model: TsiWebContactJournalEntryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsCreateContactJournalEntry.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling contactsCreateContactJournalEntry.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebJournalEntryResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/journalentries`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates the email.
     * 
     * @param contactNumber The contact number.
     * @param email The email.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsCreateEmail(contactNumber: number, email: TsiWebEmailAddress, observe?: 'body', reportProgress?: boolean): Observable<TsiWebEmailAddressResponse>;
    public contactsCreateEmail(contactNumber: number, email: TsiWebEmailAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebEmailAddressResponse>>;
    public contactsCreateEmail(contactNumber: number, email: TsiWebEmailAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebEmailAddressResponse>>;
    public contactsCreateEmail(contactNumber: number, email: TsiWebEmailAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsCreateEmail.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling contactsCreateEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebEmailAddressResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails`,
            email,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a contact phone number.
     * 
     * @param contactNumber The contact number.
     * @param phoneNumber The phone number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsCreatePhoneNumber(contactNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public contactsCreatePhoneNumber(contactNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public contactsCreatePhoneNumber(contactNumber: number, phoneNumber: TsiWebPhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public contactsCreatePhoneNumber(contactNumber: number, phoneNumber: TsiWebPhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsCreatePhoneNumber.');
        }
        if (phoneNumber === null || phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling contactsCreatePhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebPhoneNumberResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers`,
            phoneNumber,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a group from the contact.
     * The group must be url encoded
     * @param contactNumber The contact number.
     * @param id The group to remove. (Must be url encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsDeleteContactGroup(contactNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contactsDeleteContactGroup(contactNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contactsDeleteContactGroup(contactNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contactsDeleteContactGroup(contactNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsDeleteContactGroup.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contactsDeleteContactGroup.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a profile from the contact.
     * The profile must be url encoded
     * @param contactNumber The contact number.
     * @param id The profile to remove. (Must be url encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsDeleteContactProfile(contactNumber: number, id: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contactsDeleteContactProfile(contactNumber: number, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contactsDeleteContactProfile(contactNumber: number, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contactsDeleteContactProfile(contactNumber: number, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsDeleteContactProfile.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contactsDeleteContactProfile.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/profiles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the contact email.
     * 
     * @param contactNumber The contact number.
     * @param id The email address identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsDeleteEmail(contactNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contactsDeleteEmail(contactNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contactsDeleteEmail(contactNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contactsDeleteEmail(contactNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsDeleteEmail.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contactsDeleteEmail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the contact phone number.
     * 
     * @param contactNumber 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsDeletePhoneNumber(contactNumber: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebResponse>;
    public contactsDeletePhoneNumber(contactNumber: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebResponse>>;
    public contactsDeletePhoneNumber(contactNumber: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebResponse>>;
    public contactsDeletePhoneNumber(contactNumber: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsDeletePhoneNumber.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling contactsDeletePhoneNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<TsiWebResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account contacts.
     * 
     * @param accountNumber The account identifier number.
     * @param activeOnly If set to true returns only the active Contacts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetAccountContacts(accountNumber: number, activeOnly?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsGetAccountContacts(accountNumber: number, activeOnly?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsGetAccountContacts(accountNumber: number, activeOnly?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsGetAccountContacts(accountNumber: number, activeOnly?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contactsGetAccountContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeOnly !== undefined) {
            queryParameters = queryParameters.set('activeOnly', <any>activeOnly);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/account/${encodeURIComponent(String(accountNumber))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the account contacts.
     * 
     * @param accountNumber The account identifier number.
     * @param activeOnly If set to true returns only the active Contacts.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetAccountContacts_1(accountNumber: number, activeOnly: boolean, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsGetAccountContacts_1(accountNumber: number, activeOnly: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsGetAccountContacts_1(accountNumber: number, activeOnly: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsGetAccountContacts_1(accountNumber: number, activeOnly: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contactsGetAccountContacts_1.');
        }
        if (activeOnly === null || activeOnly === undefined) {
            throw new Error('Required parameter activeOnly was null or undefined when calling contactsGetAccountContacts_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/account/${encodeURIComponent(String(accountNumber))}/${encodeURIComponent(String(activeOnly))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of groups assigned to the contact.
     * 
     * @param contactNumber The contact number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetAssignedGroups(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssignedMarketingGroup>>;
    public contactsGetAssignedGroups(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssignedMarketingGroup>>>;
    public contactsGetAssignedGroups(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssignedMarketingGroup>>>;
    public contactsGetAssignedGroups(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetAssignedGroups.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssignedMarketingGroup>>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a collection of profiles assigned to the contact.
     * 
     * @param contactNumber The contact number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetAssignedProfiles(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebAssignedMarketingProfile>>;
    public contactsGetAssignedProfiles(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebAssignedMarketingProfile>>>;
    public contactsGetAssignedProfiles(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebAssignedMarketingProfile>>>;
    public contactsGetAssignedProfiles(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetAssignedProfiles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebAssignedMarketingProfile>>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/profiles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Contact tasks.Includes both completed and incomplete tasks
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param contactNumber The Contact number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContacTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public contactsGetContacTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public contactsGetContacTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public contactsGetContacTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContacTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/tasks/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Contact completed tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param contactNumber The Contact number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactCompletedTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public contactsGetContactCompletedTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public contactsGetContactCompletedTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public contactsGetContactCompletedTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactCompletedTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/tasks/completed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact detail.
     * 
     * @param contactNumber The contact identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactDetail(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactDetail>;
    public contactsGetContactDetail(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactDetail>>;
    public contactsGetContactDetail(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactDetail>>;
    public contactsGetContactDetail(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebContactDetail>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact documents.
     * 
     * @param contactNumber The contact number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactDocuments(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebDocumentsResponse>;
    public contactsGetContactDocuments(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebDocumentsResponse>>;
    public contactsGetContactDocuments(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebDocumentsResponse>>;
    public contactsGetContactDocuments(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactDocuments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebDocumentsResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Contact incomplete tasks.
     * If you are retrieving a private task and if you are not the owner, only the following the fields are retrieved.  &lt;p&gt;  AccountNumber, AccountName, ScheduledForRepNumber, ScheduledForRepName, StartDate, StartTime, WholeStartDateTime, EndDate, EndTime, WholeEnddateTime, IsPrivate  &lt;/p&gt;
     * @param contactNumber The Contact number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactIncompleteTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTasksResponse>;
    public contactsGetContactIncompleteTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTasksResponse>>;
    public contactsGetContactIncompleteTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTasksResponse>>;
    public contactsGetContactIncompleteTasks(contactNumber: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactIncompleteTasks.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTasksResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/tasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact journal entries.
     * 
     * @param contactNumber The contact number.
     * @param excludeSystemEntries If false includes system entries.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactJournalEntries(contactNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntriesResponse>;
    public contactsGetContactJournalEntries(contactNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntriesResponse>>;
    public contactsGetContactJournalEntries(contactNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntriesResponse>>;
    public contactsGetContactJournalEntries(contactNumber: number, excludeSystemEntries?: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactJournalEntries.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (excludeSystemEntries !== undefined) {
            queryParameters = queryParameters.set('excludeSystemEntries', <any>excludeSystemEntries);
        }
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebJournalEntriesResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/journalentries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact journal entries.
     * 
     * @param contactNumber The contact number.
     * @param excludeSystemEntries If false includes system entries.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactJournalEntries_2(contactNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebJournalEntriesResponse>;
    public contactsGetContactJournalEntries_2(contactNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebJournalEntriesResponse>>;
    public contactsGetContactJournalEntries_2(contactNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebJournalEntriesResponse>>;
    public contactsGetContactJournalEntries_2(contactNumber: number, excludeSystemEntries: boolean, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactJournalEntries_2.');
        }
        if (excludeSystemEntries === null || excludeSystemEntries === undefined) {
            throw new Error('Required parameter excludeSystemEntries was null or undefined when calling contactsGetContactJournalEntries_2.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebJournalEntriesResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/journalentries/${encodeURIComponent(String(excludeSystemEntries))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact summary.
     * 
     * @param contactNumber The contact identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetContactSummary(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactSummary>;
    public contactsGetContactSummary(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactSummary>>;
    public contactsGetContactSummary(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactSummary>>;
    public contactsGetContactSummary(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetContactSummary.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebContactSummary>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the custom fields for the contact.
     * 
     * @param contactNumber The contact number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetCustomFields(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebCustomField>>;
    public contactsGetCustomFields(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebCustomField>>>;
    public contactsGetCustomFields(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebCustomField>>>;
    public contactsGetCustomFields(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebCustomField>>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/customfields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact email address.
     * 
     * @param contactNumber The contact number.
     * @param emailAddressID The email address identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetEmail(contactNumber: number, emailAddressID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebEmailAddress>;
    public contactsGetEmail(contactNumber: number, emailAddressID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebEmailAddress>>;
    public contactsGetEmail(contactNumber: number, emailAddressID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebEmailAddress>>;
    public contactsGetEmail(contactNumber: number, emailAddressID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetEmail.');
        }
        if (emailAddressID === null || emailAddressID === undefined) {
            throw new Error('Required parameter emailAddressID was null or undefined when calling contactsGetEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebEmailAddress>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails/${encodeURIComponent(String(emailAddressID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact email addresses.
     * 
     * @param contactNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetEmails(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebEmailAddress>>;
    public contactsGetEmails(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebEmailAddress>>>;
    public contactsGetEmails(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebEmailAddress>>>;
    public contactsGetEmails(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetEmails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebEmailAddress>>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact phone number.
     * 
     * @param contactNumber The contact number.
     * @param phoneNumberID The phone number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumber>;
    public contactsGetPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumber>>;
    public contactsGetPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumber>>;
    public contactsGetPhoneNumber(contactNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetPhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling contactsGetPhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebPhoneNumber>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the contact phone numbers.
     * 
     * @param contactNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsGetPhoneNumbers(contactNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TsiWebPhoneNumber>>;
    public contactsGetPhoneNumbers(contactNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TsiWebPhoneNumber>>>;
    public contactsGetPhoneNumbers(contactNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TsiWebPhoneNumber>>>;
    public contactsGetPhoneNumbers(contactNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsGetPhoneNumbers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TsiWebPhoneNumber>>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Links the existing contact to the account.
     * 
     * @param contactNumber The contact number.
     * @param accountNumber The account number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsLinkContact(contactNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactResponse>;
    public contactsLinkContact(contactNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactResponse>>;
    public contactsLinkContact(contactNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactResponse>>;
    public contactsLinkContact(contactNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsLinkContact.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contactsLinkContact.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<TsiWebContactResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/accounts/${encodeURIComponent(String(accountNumber))}/link`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Accounts using a custom category and field label.
     * 
     * @param searchModel 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByCustomField(searchModel: TsiWebCustomFieldSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (searchModel === null || searchModel === undefined) {
            throw new Error('Required parameter searchModel was null or undefined when calling contactsSearchByCustomField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/customfield`,
            searchModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts by email.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByEmail(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByEmail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/email`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts by first name.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByFirstName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByFirstName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByFirstName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByFirstName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByFirstName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/firstname`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts with the full name that sounds like.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByFirstNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByFirstNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByFirstNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByFirstNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByFirstNameSoundsLike.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/firstname/soundslike`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts by last name.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByLastName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByLastName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByLastName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByLastName(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByLastName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/lastname`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts with the last name that sounds like.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByLastNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByLastNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByLastNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByLastNameSoundsLike(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByLastNameSoundsLike.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/lastname/soundslike`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches contacts by phone number.
     * 
     * @param criteria 
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSearchByPhoneNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchContactResponse>;
    public contactsSearchByPhoneNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchContactResponse>>;
    public contactsSearchByPhoneNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchContactResponse>>;
    public contactsSearchByPhoneNumber(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling contactsSearchByPhoneNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchContactResponse>(`${this.basePath}/api/contacts/search/phone`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the account primary contact.
     * 
     * @param contactNumber The contact identifier number.
     * @param accountNumber The account identifier number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetAccountPrimaryContact(contactNumber: number, accountNumber: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactResponse>;
    public contactsSetAccountPrimaryContact(contactNumber: number, accountNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactResponse>>;
    public contactsSetAccountPrimaryContact(contactNumber: number, accountNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactResponse>>;
    public contactsSetAccountPrimaryContact(contactNumber: number, accountNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetAccountPrimaryContact.');
        }
        if (accountNumber === null || accountNumber === undefined) {
            throw new Error('Required parameter accountNumber was null or undefined when calling contactsSetAccountPrimaryContact.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebContactResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/account/${encodeURIComponent(String(accountNumber))}/primary`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a group to a contact.
     * 
     * @param contactNumber The contact number.
     * @param group The group to assign.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetContactGroup(contactNumber: number, group: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAssignedMarketingGroupsResponse>;
    public contactsSetContactGroup(contactNumber: number, group: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAssignedMarketingGroupsResponse>>;
    public contactsSetContactGroup(contactNumber: number, group: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAssignedMarketingGroupsResponse>>;
    public contactsSetContactGroup(contactNumber: number, group: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetContactGroup.');
        }
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling contactsSetContactGroup.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAssignedMarketingGroupsResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/groups`,
            group,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assigns a profile to a contact.
     * 
     * @param contactNumber The contact number.
     * @param profile The profile to assign.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetContactProfile(contactNumber: number, profile: string, observe?: 'body', reportProgress?: boolean): Observable<TsiWebAssignedMarketingProfilesResponse>;
    public contactsSetContactProfile(contactNumber: number, profile: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebAssignedMarketingProfilesResponse>>;
    public contactsSetContactProfile(contactNumber: number, profile: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebAssignedMarketingProfilesResponse>>;
    public contactsSetContactProfile(contactNumber: number, profile: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetContactProfile.');
        }
        if (profile === null || profile === undefined) {
            throw new Error('Required parameter profile was null or undefined when calling contactsSetContactProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebAssignedMarketingProfilesResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/marketing/profiles`,
            profile,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary contact email address.
     * 
     * @param contactNumber The contact number.
     * @param emailAddressID The email address identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetPrimaryEmail(contactNumber: number, emailAddressID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebEmailAddressResponse>;
    public contactsSetPrimaryEmail(contactNumber: number, emailAddressID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebEmailAddressResponse>>;
    public contactsSetPrimaryEmail(contactNumber: number, emailAddressID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebEmailAddressResponse>>;
    public contactsSetPrimaryEmail(contactNumber: number, emailAddressID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetPrimaryEmail.');
        }
        if (emailAddressID === null || emailAddressID === undefined) {
            throw new Error('Required parameter emailAddressID was null or undefined when calling contactsSetPrimaryEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebEmailAddressResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails/${encodeURIComponent(String(emailAddressID))}/primary`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary contact fax number.
     * 
     * @param contactNumber The contact number.
     * @param phoneNumberID The fax number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetPrimaryFaxNumber(contactNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public contactsSetPrimaryFaxNumber(contactNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public contactsSetPrimaryFaxNumber(contactNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public contactsSetPrimaryFaxNumber(contactNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetPrimaryFaxNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling contactsSetPrimaryFaxNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}/primaryfax`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the primary contact phone number.
     * 
     * @param contactNumber The contact number.
     * @param phoneNumberID The phone number identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsSetPrimaryPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public contactsSetPrimaryPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public contactsSetPrimaryPhoneNumber(contactNumber: number, phoneNumberID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public contactsSetPrimaryPhoneNumber(contactNumber: number, phoneNumberID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsSetPrimaryPhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling contactsSetPrimaryPhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}/primaryphone`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the contact.
     * 
     * @param contactNumber The contact number.
     * @param contact The contact.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsUpdateContact(contactNumber: number, contact: TsiWebContact, observe?: 'body', reportProgress?: boolean): Observable<TsiWebContactResponse>;
    public contactsUpdateContact(contactNumber: number, contact: TsiWebContact, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebContactResponse>>;
    public contactsUpdateContact(contactNumber: number, contact: TsiWebContact, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebContactResponse>>;
    public contactsUpdateContact(contactNumber: number, contact: TsiWebContact, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsUpdateContact.');
        }
        if (contact === null || contact === undefined) {
            throw new Error('Required parameter contact was null or undefined when calling contactsUpdateContact.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebContactResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}`,
            contact,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the contacts custom fields.
     * 
     * @param contactNumber The contact number.
     * @param customFields The custom fields.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsUpdateCustomFields(contactNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'body', reportProgress?: boolean): Observable<TsiWebCustomFieldsResponse>;
    public contactsUpdateCustomFields(contactNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebCustomFieldsResponse>>;
    public contactsUpdateCustomFields(contactNumber: number, customFields: Array<TsiWebCustomField>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebCustomFieldsResponse>>;
    public contactsUpdateCustomFields(contactNumber: number, customFields: Array<TsiWebCustomField>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsUpdateCustomFields.');
        }
        if (customFields === null || customFields === undefined) {
            throw new Error('Required parameter customFields was null or undefined when calling contactsUpdateCustomFields.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebCustomFieldsResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/customfields`,
            customFields,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the email.
     * 
     * @param contactNumber The contact number.
     * @param emailAddressID The email address identifier.
     * @param email The email.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsUpdateEmail(contactNumber: number, emailAddressID: number, email: TsiWebEmailAddress, observe?: 'body', reportProgress?: boolean): Observable<TsiWebEmailAddressResponse>;
    public contactsUpdateEmail(contactNumber: number, emailAddressID: number, email: TsiWebEmailAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebEmailAddressResponse>>;
    public contactsUpdateEmail(contactNumber: number, emailAddressID: number, email: TsiWebEmailAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebEmailAddressResponse>>;
    public contactsUpdateEmail(contactNumber: number, emailAddressID: number, email: TsiWebEmailAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsUpdateEmail.');
        }
        if (emailAddressID === null || emailAddressID === undefined) {
            throw new Error('Required parameter emailAddressID was null or undefined when calling contactsUpdateEmail.');
        }
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling contactsUpdateEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebEmailAddressResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/emails/${encodeURIComponent(String(emailAddressID))}`,
            email,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Changes a contact phone number.
     * 
     * @param contactNumber The contact number.
     * @param phoneNumberID The phone number identifier.
     * @param phoneNumber The phone number.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contactsUpdatePhoneNumber(contactNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'body', reportProgress?: boolean): Observable<TsiWebPhoneNumberResponse>;
    public contactsUpdatePhoneNumber(contactNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebPhoneNumberResponse>>;
    public contactsUpdatePhoneNumber(contactNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebPhoneNumberResponse>>;
    public contactsUpdatePhoneNumber(contactNumber: number, phoneNumberID: number, phoneNumber: TsiWebPhoneNumber, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contactNumber === null || contactNumber === undefined) {
            throw new Error('Required parameter contactNumber was null or undefined when calling contactsUpdatePhoneNumber.');
        }
        if (phoneNumberID === null || phoneNumberID === undefined) {
            throw new Error('Required parameter phoneNumberID was null or undefined when calling contactsUpdatePhoneNumber.');
        }
        if (phoneNumber === null || phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling contactsUpdatePhoneNumber.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TsiWebPhoneNumberResponse>(`${this.basePath}/api/contacts/${encodeURIComponent(String(contactNumber))}/phonenumbers/${encodeURIComponent(String(phoneNumberID))}`,
            phoneNumber,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
