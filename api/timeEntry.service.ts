/**
 * Tigerpaw API Method Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { TsiWebAdvancedSearchRequest } from '../model/tsiWebAdvancedSearchRequest';
import { TsiWebDateTimeSearchModel } from '../model/tsiWebDateTimeSearchModel';
import { TsiWebSearchTimeEntryResponse } from '../model/tsiWebSearchTimeEntryResponse';
import { TsiWebTimeEntryResponse } from '../model/tsiWebTimeEntryResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TimeEntryService {

    protected basePath = 'http://api2.tigerpawsoftware.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Advanced search for time entry.
     * 
     * @param request An AdvancedSearchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntryAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchTimeEntryResponse>;
    public timeEntryAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchTimeEntryResponse>>;
    public timeEntryAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchTimeEntryResponse>>;
    public timeEntryAdvancedSearch(request: TsiWebAdvancedSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling timeEntryAdvancedSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchTimeEntryResponse>(`${this.basePath}/api/timeentries/search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the time entries by tech assigned.
     * 
     * @param techAssigned The tech assigned number.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntryGetTimeEntriesByTechAssigned(techAssigned: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebTimeEntryResponse>;
    public timeEntryGetTimeEntriesByTechAssigned(techAssigned: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebTimeEntryResponse>>;
    public timeEntryGetTimeEntriesByTechAssigned(techAssigned: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebTimeEntryResponse>>;
    public timeEntryGetTimeEntriesByTechAssigned(techAssigned: number, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (techAssigned === null || techAssigned === undefined) {
            throw new Error('Required parameter techAssigned was null or undefined when calling timeEntryGetTimeEntriesByTechAssigned.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<TsiWebTimeEntryResponse>(`${this.basePath}/api/timeentries/techassigned/${encodeURIComponent(String(techAssigned))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search time entry by end date time.
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntrySearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchTimeEntryResponse>;
    public timeEntrySearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByEndDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling timeEntrySearchByEndDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchTimeEntryResponse>(`${this.basePath}/api/timeentries/search/enddate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search time entry by start date time.
     * 
     * @param model A {Tsi.Web.DateTimeSearchModel}
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntrySearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchTimeEntryResponse>;
    public timeEntrySearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByStartDate(model: TsiWebDateTimeSearchModel, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling timeEntrySearchByStartDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchTimeEntryResponse>(`${this.basePath}/api/timeentries/search/startdate`,
            model,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search time entry by log reason.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntrySearchByTimeEntryLogReason(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchTimeEntryResponse>;
    public timeEntrySearchByTimeEntryLogReason(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByTimeEntryLogReason(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByTimeEntryLogReason(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling timeEntrySearchByTimeEntryLogReason.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchTimeEntryResponse>(`${this.basePath}/api/timeentries/search/logreason`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search time entry by tech assigned.
     * 
     * @param criteria A JSON or XML string containing the criteria.
     * @param pageRequestPageSize 
     * @param pageRequestStartRow 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public timeEntrySearchByTimeEntryTEchAssigned(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'body', reportProgress?: boolean): Observable<TsiWebSearchTimeEntryResponse>;
    public timeEntrySearchByTimeEntryTEchAssigned(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByTimeEntryTEchAssigned(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TsiWebSearchTimeEntryResponse>>;
    public timeEntrySearchByTimeEntryTEchAssigned(criteria: string, pageRequestPageSize?: number, pageRequestStartRow?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (criteria === null || criteria === undefined) {
            throw new Error('Required parameter criteria was null or undefined when calling timeEntrySearchByTimeEntryTEchAssigned.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageRequestPageSize !== undefined) {
            queryParameters = queryParameters.set('pageRequest.pageSize', <any>pageRequestPageSize);
        }
        if (pageRequestStartRow !== undefined) {
            queryParameters = queryParameters.set('pageRequest.startRow', <any>pageRequestStartRow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json',
            'application/xml',
            'text/xml'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TsiWebSearchTimeEntryResponse>(`${this.basePath}/api/timeentries/search/techassigned`,
            criteria,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
